<MACRO>
<NAME>VALA_EXTERN</NAME>
#define VALA_EXTERN __declspec(dllexport) extern
</MACRO>
<MACRO>
<NAME>PLANK_G_RESOURCE_PATH</NAME>
#define PLANK_G_RESOURCE_PATH "/net/launchpad/plank"
</MACRO>
<MACRO>
<NAME>PLANK_DOCK_PREFERENCES_MIN_ICON_SIZE</NAME>
#define PLANK_DOCK_PREFERENCES_MIN_ICON_SIZE 24
</MACRO>
<MACRO>
<NAME>PLANK_DOCK_PREFERENCES_MAX_ICON_SIZE</NAME>
#define PLANK_DOCK_PREFERENCES_MAX_ICON_SIZE 128
</MACRO>
<MACRO>
<NAME>PLANK_DOCK_PREFERENCES_MIN_ICON_ZOOM</NAME>
#define PLANK_DOCK_PREFERENCES_MIN_ICON_ZOOM 100
</MACRO>
<MACRO>
<NAME>PLANK_DOCK_PREFERENCES_MAX_ICON_ZOOM</NAME>
#define PLANK_DOCK_PREFERENCES_MAX_ICON_ZOOM 400
</MACRO>
<MACRO>
<NAME>PLANK_DOCK_PREFERENCES_MIN_GAP_SIZE</NAME>
#define PLANK_DOCK_PREFERENCES_MIN_GAP_SIZE 0
</MACRO>
<MACRO>
<NAME>PLANK_DOCK_PREFERENCES_MAX_GAP_SIZE</NAME>
#define PLANK_DOCK_PREFERENCES_MAX_GAP_SIZE 50
</MACRO>
<MACRO>
<NAME>PLANK_DOCKLET_ENTRY_POINT</NAME>
#define PLANK_DOCKLET_ENTRY_POINT "docklet_init"
</MACRO>
<MACRO>
<NAME>PLANK_THEME_DEFAULT_NAME</NAME>
#define PLANK_THEME_DEFAULT_NAME "Default"
</MACRO>
<MACRO>
<NAME>PLANK_THEME_GTK_THEME_NAME</NAME>
#define PLANK_THEME_GTK_THEME_NAME "Gtk+"
</MACRO>
<MACRO>
<NAME>PLANK_MAJOR_VERSION</NAME>
#define PLANK_MAJOR_VERSION 0
</MACRO>
<MACRO>
<NAME>PLANK_MINOR_VERSION</NAME>
#define PLANK_MINOR_VERSION 11
</MACRO>
<MACRO>
<NAME>PLANK_MICRO_VERSION</NAME>
#define PLANK_MICRO_VERSION 122
</MACRO>
<MACRO>
<NAME>PLANK_NANO_VERSION</NAME>
#define PLANK_NANO_VERSION 0
</MACRO>
<MACRO>
<NAME>PLANK_TYPE_DBUS_MANAGER</NAME>
#define PLANK_TYPE_DBUS_MANAGER (plank_dbus_manager_get_type ())
</MACRO>
<MACRO>
<NAME>PLANK_DBUS_MANAGER</NAME>
#define PLANK_DBUS_MANAGER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), PLANK_TYPE_DBUS_MANAGER, PlankDBusManager))
</MACRO>
<MACRO>
<NAME>PLANK_DBUS_MANAGER_CLASS</NAME>
#define PLANK_DBUS_MANAGER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), PLANK_TYPE_DBUS_MANAGER, PlankDBusManagerClass))
</MACRO>
<MACRO>
<NAME>PLANK_IS_DBUS_MANAGER</NAME>
#define PLANK_IS_DBUS_MANAGER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), PLANK_TYPE_DBUS_MANAGER))
</MACRO>
<MACRO>
<NAME>PLANK_IS_DBUS_MANAGER_CLASS</NAME>
#define PLANK_IS_DBUS_MANAGER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), PLANK_TYPE_DBUS_MANAGER))
</MACRO>
<MACRO>
<NAME>PLANK_DBUS_MANAGER_GET_CLASS</NAME>
#define PLANK_DBUS_MANAGER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), PLANK_TYPE_DBUS_MANAGER, PlankDBusManagerClass))
</MACRO>
<MACRO>
<NAME>PLANK_TYPE_DOCK_ELEMENT</NAME>
#define PLANK_TYPE_DOCK_ELEMENT (plank_dock_element_get_type ())
</MACRO>
<MACRO>
<NAME>PLANK_DOCK_ELEMENT</NAME>
#define PLANK_DOCK_ELEMENT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), PLANK_TYPE_DOCK_ELEMENT, PlankDockElement))
</MACRO>
<MACRO>
<NAME>PLANK_DOCK_ELEMENT_CLASS</NAME>
#define PLANK_DOCK_ELEMENT_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), PLANK_TYPE_DOCK_ELEMENT, PlankDockElementClass))
</MACRO>
<MACRO>
<NAME>PLANK_IS_DOCK_ELEMENT</NAME>
#define PLANK_IS_DOCK_ELEMENT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), PLANK_TYPE_DOCK_ELEMENT))
</MACRO>
<MACRO>
<NAME>PLANK_IS_DOCK_ELEMENT_CLASS</NAME>
#define PLANK_IS_DOCK_ELEMENT_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), PLANK_TYPE_DOCK_ELEMENT))
</MACRO>
<MACRO>
<NAME>PLANK_DOCK_ELEMENT_GET_CLASS</NAME>
#define PLANK_DOCK_ELEMENT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), PLANK_TYPE_DOCK_ELEMENT, PlankDockElementClass))
</MACRO>
<MACRO>
<NAME>PLANK_TYPE_DOCK_CONTAINER</NAME>
#define PLANK_TYPE_DOCK_CONTAINER (plank_dock_container_get_type ())
</MACRO>
<MACRO>
<NAME>PLANK_DOCK_CONTAINER</NAME>
#define PLANK_DOCK_CONTAINER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), PLANK_TYPE_DOCK_CONTAINER, PlankDockContainer))
</MACRO>
<MACRO>
<NAME>PLANK_DOCK_CONTAINER_CLASS</NAME>
#define PLANK_DOCK_CONTAINER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), PLANK_TYPE_DOCK_CONTAINER, PlankDockContainerClass))
</MACRO>
<MACRO>
<NAME>PLANK_IS_DOCK_CONTAINER</NAME>
#define PLANK_IS_DOCK_CONTAINER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), PLANK_TYPE_DOCK_CONTAINER))
</MACRO>
<MACRO>
<NAME>PLANK_IS_DOCK_CONTAINER_CLASS</NAME>
#define PLANK_IS_DOCK_CONTAINER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), PLANK_TYPE_DOCK_CONTAINER))
</MACRO>
<MACRO>
<NAME>PLANK_DOCK_CONTAINER_GET_CLASS</NAME>
#define PLANK_DOCK_CONTAINER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), PLANK_TYPE_DOCK_CONTAINER, PlankDockContainerClass))
</MACRO>
<MACRO>
<NAME>PLANK_TYPE_DOCK_CONTROLLER</NAME>
#define PLANK_TYPE_DOCK_CONTROLLER (plank_dock_controller_get_type ())
</MACRO>
<MACRO>
<NAME>PLANK_DOCK_CONTROLLER</NAME>
#define PLANK_DOCK_CONTROLLER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), PLANK_TYPE_DOCK_CONTROLLER, PlankDockController))
</MACRO>
<MACRO>
<NAME>PLANK_DOCK_CONTROLLER_CLASS</NAME>
#define PLANK_DOCK_CONTROLLER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), PLANK_TYPE_DOCK_CONTROLLER, PlankDockControllerClass))
</MACRO>
<MACRO>
<NAME>PLANK_IS_DOCK_CONTROLLER</NAME>
#define PLANK_IS_DOCK_CONTROLLER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), PLANK_TYPE_DOCK_CONTROLLER))
</MACRO>
<MACRO>
<NAME>PLANK_IS_DOCK_CONTROLLER_CLASS</NAME>
#define PLANK_IS_DOCK_CONTROLLER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), PLANK_TYPE_DOCK_CONTROLLER))
</MACRO>
<MACRO>
<NAME>PLANK_DOCK_CONTROLLER_GET_CLASS</NAME>
#define PLANK_DOCK_CONTROLLER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), PLANK_TYPE_DOCK_CONTROLLER, PlankDockControllerClass))
</MACRO>
<ENUM>
<NAME>PlankPopupButton</NAME>
typedef enum  {
	PLANK_POPUP_BUTTON_NONE = 1 << 0,
	PLANK_POPUP_BUTTON_LEFT = 1 << 1,
	PLANK_POPUP_BUTTON_MIDDLE = 1 << 2,
	PLANK_POPUP_BUTTON_RIGHT = 1 << 3
} PlankPopupButton;
</ENUM>
<MACRO>
<NAME>PLANK_TYPE_POPUP_BUTTON</NAME>
#define PLANK_TYPE_POPUP_BUTTON (plank_popup_button_get_type ())
</MACRO>
<ENUM>
<NAME>PlankAnimationType</NAME>
typedef enum  {
	PLANK_ANIMATION_TYPE_NONE,
	PLANK_ANIMATION_TYPE_BOUNCE,
	PLANK_ANIMATION_TYPE_DARKEN,
	PLANK_ANIMATION_TYPE_LIGHTEN
} PlankAnimationType;
</ENUM>
<MACRO>
<NAME>PLANK_TYPE_ANIMATION_TYPE</NAME>
#define PLANK_TYPE_ANIMATION_TYPE (plank_animation_type_get_type ())
</MACRO>
<MACRO>
<NAME>PLANK_TYPE_SETTINGS</NAME>
#define PLANK_TYPE_SETTINGS (plank_settings_get_type ())
</MACRO>
<MACRO>
<NAME>PLANK_SETTINGS</NAME>
#define PLANK_SETTINGS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), PLANK_TYPE_SETTINGS, PlankSettings))
</MACRO>
<MACRO>
<NAME>PLANK_SETTINGS_CLASS</NAME>
#define PLANK_SETTINGS_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), PLANK_TYPE_SETTINGS, PlankSettingsClass))
</MACRO>
<MACRO>
<NAME>PLANK_IS_SETTINGS</NAME>
#define PLANK_IS_SETTINGS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), PLANK_TYPE_SETTINGS))
</MACRO>
<MACRO>
<NAME>PLANK_IS_SETTINGS_CLASS</NAME>
#define PLANK_IS_SETTINGS_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), PLANK_TYPE_SETTINGS))
</MACRO>
<MACRO>
<NAME>PLANK_SETTINGS_GET_CLASS</NAME>
#define PLANK_SETTINGS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), PLANK_TYPE_SETTINGS, PlankSettingsClass))
</MACRO>
<MACRO>
<NAME>PLANK_TYPE_DOCK_PREFERENCES</NAME>
#define PLANK_TYPE_DOCK_PREFERENCES (plank_dock_preferences_get_type ())
</MACRO>
<MACRO>
<NAME>PLANK_DOCK_PREFERENCES</NAME>
#define PLANK_DOCK_PREFERENCES(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), PLANK_TYPE_DOCK_PREFERENCES, PlankDockPreferences))
</MACRO>
<MACRO>
<NAME>PLANK_DOCK_PREFERENCES_CLASS</NAME>
#define PLANK_DOCK_PREFERENCES_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), PLANK_TYPE_DOCK_PREFERENCES, PlankDockPreferencesClass))
</MACRO>
<MACRO>
<NAME>PLANK_IS_DOCK_PREFERENCES</NAME>
#define PLANK_IS_DOCK_PREFERENCES(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), PLANK_TYPE_DOCK_PREFERENCES))
</MACRO>
<MACRO>
<NAME>PLANK_IS_DOCK_PREFERENCES_CLASS</NAME>
#define PLANK_IS_DOCK_PREFERENCES_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), PLANK_TYPE_DOCK_PREFERENCES))
</MACRO>
<MACRO>
<NAME>PLANK_DOCK_PREFERENCES_GET_CLASS</NAME>
#define PLANK_DOCK_PREFERENCES_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), PLANK_TYPE_DOCK_PREFERENCES, PlankDockPreferencesClass))
</MACRO>
<MACRO>
<NAME>PLANK_TYPE_DRAG_MANAGER</NAME>
#define PLANK_TYPE_DRAG_MANAGER (plank_drag_manager_get_type ())
</MACRO>
<MACRO>
<NAME>PLANK_DRAG_MANAGER</NAME>
#define PLANK_DRAG_MANAGER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), PLANK_TYPE_DRAG_MANAGER, PlankDragManager))
</MACRO>
<MACRO>
<NAME>PLANK_DRAG_MANAGER_CLASS</NAME>
#define PLANK_DRAG_MANAGER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), PLANK_TYPE_DRAG_MANAGER, PlankDragManagerClass))
</MACRO>
<MACRO>
<NAME>PLANK_IS_DRAG_MANAGER</NAME>
#define PLANK_IS_DRAG_MANAGER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), PLANK_TYPE_DRAG_MANAGER))
</MACRO>
<MACRO>
<NAME>PLANK_IS_DRAG_MANAGER_CLASS</NAME>
#define PLANK_IS_DRAG_MANAGER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), PLANK_TYPE_DRAG_MANAGER))
</MACRO>
<MACRO>
<NAME>PLANK_DRAG_MANAGER_GET_CLASS</NAME>
#define PLANK_DRAG_MANAGER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), PLANK_TYPE_DRAG_MANAGER, PlankDragManagerClass))
</MACRO>
<MACRO>
<NAME>PLANK_TYPE_HIDE_MANAGER</NAME>
#define PLANK_TYPE_HIDE_MANAGER (plank_hide_manager_get_type ())
</MACRO>
<MACRO>
<NAME>PLANK_HIDE_MANAGER</NAME>
#define PLANK_HIDE_MANAGER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), PLANK_TYPE_HIDE_MANAGER, PlankHideManager))
</MACRO>
<MACRO>
<NAME>PLANK_HIDE_MANAGER_CLASS</NAME>
#define PLANK_HIDE_MANAGER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), PLANK_TYPE_HIDE_MANAGER, PlankHideManagerClass))
</MACRO>
<MACRO>
<NAME>PLANK_IS_HIDE_MANAGER</NAME>
#define PLANK_IS_HIDE_MANAGER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), PLANK_TYPE_HIDE_MANAGER))
</MACRO>
<MACRO>
<NAME>PLANK_IS_HIDE_MANAGER_CLASS</NAME>
#define PLANK_IS_HIDE_MANAGER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), PLANK_TYPE_HIDE_MANAGER))
</MACRO>
<MACRO>
<NAME>PLANK_HIDE_MANAGER_GET_CLASS</NAME>
#define PLANK_HIDE_MANAGER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), PLANK_TYPE_HIDE_MANAGER, PlankHideManagerClass))
</MACRO>
<MACRO>
<NAME>PLANK_TYPE_POSITION_MANAGER</NAME>
#define PLANK_TYPE_POSITION_MANAGER (plank_position_manager_get_type ())
</MACRO>
<MACRO>
<NAME>PLANK_POSITION_MANAGER</NAME>
#define PLANK_POSITION_MANAGER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), PLANK_TYPE_POSITION_MANAGER, PlankPositionManager))
</MACRO>
<MACRO>
<NAME>PLANK_POSITION_MANAGER_CLASS</NAME>
#define PLANK_POSITION_MANAGER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), PLANK_TYPE_POSITION_MANAGER, PlankPositionManagerClass))
</MACRO>
<MACRO>
<NAME>PLANK_IS_POSITION_MANAGER</NAME>
#define PLANK_IS_POSITION_MANAGER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), PLANK_TYPE_POSITION_MANAGER))
</MACRO>
<MACRO>
<NAME>PLANK_IS_POSITION_MANAGER_CLASS</NAME>
#define PLANK_IS_POSITION_MANAGER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), PLANK_TYPE_POSITION_MANAGER))
</MACRO>
<MACRO>
<NAME>PLANK_POSITION_MANAGER_GET_CLASS</NAME>
#define PLANK_POSITION_MANAGER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), PLANK_TYPE_POSITION_MANAGER, PlankPositionManagerClass))
</MACRO>
<MACRO>
<NAME>PLANK_TYPE_RENDERER</NAME>
#define PLANK_TYPE_RENDERER (plank_renderer_get_type ())
</MACRO>
<MACRO>
<NAME>PLANK_RENDERER</NAME>
#define PLANK_RENDERER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), PLANK_TYPE_RENDERER, PlankRenderer))
</MACRO>
<MACRO>
<NAME>PLANK_RENDERER_CLASS</NAME>
#define PLANK_RENDERER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), PLANK_TYPE_RENDERER, PlankRendererClass))
</MACRO>
<MACRO>
<NAME>PLANK_IS_RENDERER</NAME>
#define PLANK_IS_RENDERER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), PLANK_TYPE_RENDERER))
</MACRO>
<MACRO>
<NAME>PLANK_IS_RENDERER_CLASS</NAME>
#define PLANK_IS_RENDERER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), PLANK_TYPE_RENDERER))
</MACRO>
<MACRO>
<NAME>PLANK_RENDERER_GET_CLASS</NAME>
#define PLANK_RENDERER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), PLANK_TYPE_RENDERER, PlankRendererClass))
</MACRO>
<MACRO>
<NAME>PLANK_TYPE_DOCK_RENDERER</NAME>
#define PLANK_TYPE_DOCK_RENDERER (plank_dock_renderer_get_type ())
</MACRO>
<MACRO>
<NAME>PLANK_DOCK_RENDERER</NAME>
#define PLANK_DOCK_RENDERER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), PLANK_TYPE_DOCK_RENDERER, PlankDockRenderer))
</MACRO>
<MACRO>
<NAME>PLANK_DOCK_RENDERER_CLASS</NAME>
#define PLANK_DOCK_RENDERER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), PLANK_TYPE_DOCK_RENDERER, PlankDockRendererClass))
</MACRO>
<MACRO>
<NAME>PLANK_IS_DOCK_RENDERER</NAME>
#define PLANK_IS_DOCK_RENDERER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), PLANK_TYPE_DOCK_RENDERER))
</MACRO>
<MACRO>
<NAME>PLANK_IS_DOCK_RENDERER_CLASS</NAME>
#define PLANK_IS_DOCK_RENDERER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), PLANK_TYPE_DOCK_RENDERER))
</MACRO>
<MACRO>
<NAME>PLANK_DOCK_RENDERER_GET_CLASS</NAME>
#define PLANK_DOCK_RENDERER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), PLANK_TYPE_DOCK_RENDERER, PlankDockRendererClass))
</MACRO>
<MACRO>
<NAME>PLANK_TYPE_COMPOSITED_WINDOW</NAME>
#define PLANK_TYPE_COMPOSITED_WINDOW (plank_composited_window_get_type ())
</MACRO>
<MACRO>
<NAME>PLANK_COMPOSITED_WINDOW</NAME>
#define PLANK_COMPOSITED_WINDOW(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), PLANK_TYPE_COMPOSITED_WINDOW, PlankCompositedWindow))
</MACRO>
<MACRO>
<NAME>PLANK_COMPOSITED_WINDOW_CLASS</NAME>
#define PLANK_COMPOSITED_WINDOW_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), PLANK_TYPE_COMPOSITED_WINDOW, PlankCompositedWindowClass))
</MACRO>
<MACRO>
<NAME>PLANK_IS_COMPOSITED_WINDOW</NAME>
#define PLANK_IS_COMPOSITED_WINDOW(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), PLANK_TYPE_COMPOSITED_WINDOW))
</MACRO>
<MACRO>
<NAME>PLANK_IS_COMPOSITED_WINDOW_CLASS</NAME>
#define PLANK_IS_COMPOSITED_WINDOW_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), PLANK_TYPE_COMPOSITED_WINDOW))
</MACRO>
<MACRO>
<NAME>PLANK_COMPOSITED_WINDOW_GET_CLASS</NAME>
#define PLANK_COMPOSITED_WINDOW_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), PLANK_TYPE_COMPOSITED_WINDOW, PlankCompositedWindowClass))
</MACRO>
<MACRO>
<NAME>PLANK_TYPE_DOCK_WINDOW</NAME>
#define PLANK_TYPE_DOCK_WINDOW (plank_dock_window_get_type ())
</MACRO>
<MACRO>
<NAME>PLANK_DOCK_WINDOW</NAME>
#define PLANK_DOCK_WINDOW(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), PLANK_TYPE_DOCK_WINDOW, PlankDockWindow))
</MACRO>
<MACRO>
<NAME>PLANK_DOCK_WINDOW_CLASS</NAME>
#define PLANK_DOCK_WINDOW_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), PLANK_TYPE_DOCK_WINDOW, PlankDockWindowClass))
</MACRO>
<MACRO>
<NAME>PLANK_IS_DOCK_WINDOW</NAME>
#define PLANK_IS_DOCK_WINDOW(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), PLANK_TYPE_DOCK_WINDOW))
</MACRO>
<MACRO>
<NAME>PLANK_IS_DOCK_WINDOW_CLASS</NAME>
#define PLANK_IS_DOCK_WINDOW_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), PLANK_TYPE_DOCK_WINDOW))
</MACRO>
<MACRO>
<NAME>PLANK_DOCK_WINDOW_GET_CLASS</NAME>
#define PLANK_DOCK_WINDOW_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), PLANK_TYPE_DOCK_WINDOW, PlankDockWindowClass))
</MACRO>
<MACRO>
<NAME>PLANK_TYPE_HOVER_WINDOW</NAME>
#define PLANK_TYPE_HOVER_WINDOW (plank_hover_window_get_type ())
</MACRO>
<MACRO>
<NAME>PLANK_HOVER_WINDOW</NAME>
#define PLANK_HOVER_WINDOW(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), PLANK_TYPE_HOVER_WINDOW, PlankHoverWindow))
</MACRO>
<MACRO>
<NAME>PLANK_HOVER_WINDOW_CLASS</NAME>
#define PLANK_HOVER_WINDOW_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), PLANK_TYPE_HOVER_WINDOW, PlankHoverWindowClass))
</MACRO>
<MACRO>
<NAME>PLANK_IS_HOVER_WINDOW</NAME>
#define PLANK_IS_HOVER_WINDOW(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), PLANK_TYPE_HOVER_WINDOW))
</MACRO>
<MACRO>
<NAME>PLANK_IS_HOVER_WINDOW_CLASS</NAME>
#define PLANK_IS_HOVER_WINDOW_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), PLANK_TYPE_HOVER_WINDOW))
</MACRO>
<MACRO>
<NAME>PLANK_HOVER_WINDOW_GET_CLASS</NAME>
#define PLANK_HOVER_WINDOW_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), PLANK_TYPE_HOVER_WINDOW, PlankHoverWindowClass))
</MACRO>
<MACRO>
<NAME>PLANK_TYPE_DOCK_ITEM_PROVIDER</NAME>
#define PLANK_TYPE_DOCK_ITEM_PROVIDER (plank_dock_item_provider_get_type ())
</MACRO>
<MACRO>
<NAME>PLANK_DOCK_ITEM_PROVIDER</NAME>
#define PLANK_DOCK_ITEM_PROVIDER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), PLANK_TYPE_DOCK_ITEM_PROVIDER, PlankDockItemProvider))
</MACRO>
<MACRO>
<NAME>PLANK_DOCK_ITEM_PROVIDER_CLASS</NAME>
#define PLANK_DOCK_ITEM_PROVIDER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), PLANK_TYPE_DOCK_ITEM_PROVIDER, PlankDockItemProviderClass))
</MACRO>
<MACRO>
<NAME>PLANK_IS_DOCK_ITEM_PROVIDER</NAME>
#define PLANK_IS_DOCK_ITEM_PROVIDER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), PLANK_TYPE_DOCK_ITEM_PROVIDER))
</MACRO>
<MACRO>
<NAME>PLANK_IS_DOCK_ITEM_PROVIDER_CLASS</NAME>
#define PLANK_IS_DOCK_ITEM_PROVIDER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), PLANK_TYPE_DOCK_ITEM_PROVIDER))
</MACRO>
<MACRO>
<NAME>PLANK_DOCK_ITEM_PROVIDER_GET_CLASS</NAME>
#define PLANK_DOCK_ITEM_PROVIDER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), PLANK_TYPE_DOCK_ITEM_PROVIDER, PlankDockItemProviderClass))
</MACRO>
<MACRO>
<NAME>PLANK_TYPE_DOCK_ITEM</NAME>
#define PLANK_TYPE_DOCK_ITEM (plank_dock_item_get_type ())
</MACRO>
<MACRO>
<NAME>PLANK_DOCK_ITEM</NAME>
#define PLANK_DOCK_ITEM(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), PLANK_TYPE_DOCK_ITEM, PlankDockItem))
</MACRO>
<MACRO>
<NAME>PLANK_DOCK_ITEM_CLASS</NAME>
#define PLANK_DOCK_ITEM_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), PLANK_TYPE_DOCK_ITEM, PlankDockItemClass))
</MACRO>
<MACRO>
<NAME>PLANK_IS_DOCK_ITEM</NAME>
#define PLANK_IS_DOCK_ITEM(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), PLANK_TYPE_DOCK_ITEM))
</MACRO>
<MACRO>
<NAME>PLANK_IS_DOCK_ITEM_CLASS</NAME>
#define PLANK_IS_DOCK_ITEM_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), PLANK_TYPE_DOCK_ITEM))
</MACRO>
<MACRO>
<NAME>PLANK_DOCK_ITEM_GET_CLASS</NAME>
#define PLANK_DOCK_ITEM_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), PLANK_TYPE_DOCK_ITEM, PlankDockItemClass))
</MACRO>
<ENUM>
<NAME>PlankHideType</NAME>
typedef enum  {
	PLANK_HIDE_TYPE_NONE,
	PLANK_HIDE_TYPE_INTELLIGENT,
	PLANK_HIDE_TYPE_AUTO,
	PLANK_HIDE_TYPE_DODGE_MAXIMIZED,
	PLANK_HIDE_TYPE_WINDOW_DODGE,
	PLANK_HIDE_TYPE_DODGE_ACTIVE
} PlankHideType;
</ENUM>
<MACRO>
<NAME>PLANK_TYPE_HIDE_TYPE</NAME>
#define PLANK_TYPE_HIDE_TYPE (plank_hide_type_get_type ())
</MACRO>
<MACRO>
<NAME>PLANK_TYPE_PREFERENCES</NAME>
#define PLANK_TYPE_PREFERENCES (plank_preferences_get_type ())
</MACRO>
<MACRO>
<NAME>PLANK_PREFERENCES</NAME>
#define PLANK_PREFERENCES(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), PLANK_TYPE_PREFERENCES, PlankPreferences))
</MACRO>
<MACRO>
<NAME>PLANK_PREFERENCES_CLASS</NAME>
#define PLANK_PREFERENCES_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), PLANK_TYPE_PREFERENCES, PlankPreferencesClass))
</MACRO>
<MACRO>
<NAME>PLANK_IS_PREFERENCES</NAME>
#define PLANK_IS_PREFERENCES(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), PLANK_TYPE_PREFERENCES))
</MACRO>
<MACRO>
<NAME>PLANK_IS_PREFERENCES_CLASS</NAME>
#define PLANK_IS_PREFERENCES_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), PLANK_TYPE_PREFERENCES))
</MACRO>
<MACRO>
<NAME>PLANK_PREFERENCES_GET_CLASS</NAME>
#define PLANK_PREFERENCES_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), PLANK_TYPE_PREFERENCES, PlankPreferencesClass))
</MACRO>
<MACRO>
<NAME>PLANK_TYPE_THEME</NAME>
#define PLANK_TYPE_THEME (plank_theme_get_type ())
</MACRO>
<MACRO>
<NAME>PLANK_THEME</NAME>
#define PLANK_THEME(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), PLANK_TYPE_THEME, PlankTheme))
</MACRO>
<MACRO>
<NAME>PLANK_THEME_CLASS</NAME>
#define PLANK_THEME_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), PLANK_TYPE_THEME, PlankThemeClass))
</MACRO>
<MACRO>
<NAME>PLANK_IS_THEME</NAME>
#define PLANK_IS_THEME(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), PLANK_TYPE_THEME))
</MACRO>
<MACRO>
<NAME>PLANK_IS_THEME_CLASS</NAME>
#define PLANK_IS_THEME_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), PLANK_TYPE_THEME))
</MACRO>
<MACRO>
<NAME>PLANK_THEME_GET_CLASS</NAME>
#define PLANK_THEME_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), PLANK_TYPE_THEME, PlankThemeClass))
</MACRO>
<MACRO>
<NAME>PLANK_TYPE_DOCK_THEME</NAME>
#define PLANK_TYPE_DOCK_THEME (plank_dock_theme_get_type ())
</MACRO>
<MACRO>
<NAME>PLANK_DOCK_THEME</NAME>
#define PLANK_DOCK_THEME(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), PLANK_TYPE_DOCK_THEME, PlankDockTheme))
</MACRO>
<MACRO>
<NAME>PLANK_DOCK_THEME_CLASS</NAME>
#define PLANK_DOCK_THEME_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), PLANK_TYPE_DOCK_THEME, PlankDockThemeClass))
</MACRO>
<MACRO>
<NAME>PLANK_IS_DOCK_THEME</NAME>
#define PLANK_IS_DOCK_THEME(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), PLANK_TYPE_DOCK_THEME))
</MACRO>
<MACRO>
<NAME>PLANK_IS_DOCK_THEME_CLASS</NAME>
#define PLANK_IS_DOCK_THEME_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), PLANK_TYPE_DOCK_THEME))
</MACRO>
<MACRO>
<NAME>PLANK_DOCK_THEME_GET_CLASS</NAME>
#define PLANK_DOCK_THEME_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), PLANK_TYPE_DOCK_THEME, PlankDockThemeClass))
</MACRO>
<MACRO>
<NAME>PLANK_TYPE_DOCK_ITEM_DRAW_VALUE</NAME>
#define PLANK_TYPE_DOCK_ITEM_DRAW_VALUE (plank_dock_item_draw_value_get_type ())
</MACRO>
<MACRO>
<NAME>PLANK_DOCK_ITEM_DRAW_VALUE</NAME>
#define PLANK_DOCK_ITEM_DRAW_VALUE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), PLANK_TYPE_DOCK_ITEM_DRAW_VALUE, PlankDockItemDrawValue))
</MACRO>
<MACRO>
<NAME>PLANK_DOCK_ITEM_DRAW_VALUE_CLASS</NAME>
#define PLANK_DOCK_ITEM_DRAW_VALUE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), PLANK_TYPE_DOCK_ITEM_DRAW_VALUE, PlankDockItemDrawValueClass))
</MACRO>
<MACRO>
<NAME>PLANK_IS_DOCK_ITEM_DRAW_VALUE</NAME>
#define PLANK_IS_DOCK_ITEM_DRAW_VALUE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), PLANK_TYPE_DOCK_ITEM_DRAW_VALUE))
</MACRO>
<MACRO>
<NAME>PLANK_IS_DOCK_ITEM_DRAW_VALUE_CLASS</NAME>
#define PLANK_IS_DOCK_ITEM_DRAW_VALUE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), PLANK_TYPE_DOCK_ITEM_DRAW_VALUE))
</MACRO>
<MACRO>
<NAME>PLANK_DOCK_ITEM_DRAW_VALUE_GET_CLASS</NAME>
#define PLANK_DOCK_ITEM_DRAW_VALUE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), PLANK_TYPE_DOCK_ITEM_DRAW_VALUE, PlankDockItemDrawValueClass))
</MACRO>
<USER_FUNCTION>
<NAME>PlankDrawValueFunc</NAME>
<RETURNS>void</RETURNS>
PlankDockItem* item, PlankDockItemDrawValue* draw_value, gpointer user_data
</USER_FUNCTION>
<USER_FUNCTION>
<NAME>PlankDrawValuesFunc</NAME>
<RETURNS>void</RETURNS>
GeeHashMap* draw_values, gpointer user_data
</USER_FUNCTION>
<MACRO>
<NAME>PLANK_TYPE_APPLICATION_DOCK_ITEM</NAME>
#define PLANK_TYPE_APPLICATION_DOCK_ITEM (plank_application_dock_item_get_type ())
</MACRO>
<MACRO>
<NAME>PLANK_APPLICATION_DOCK_ITEM</NAME>
#define PLANK_APPLICATION_DOCK_ITEM(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), PLANK_TYPE_APPLICATION_DOCK_ITEM, PlankApplicationDockItem))
</MACRO>
<MACRO>
<NAME>PLANK_APPLICATION_DOCK_ITEM_CLASS</NAME>
#define PLANK_APPLICATION_DOCK_ITEM_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), PLANK_TYPE_APPLICATION_DOCK_ITEM, PlankApplicationDockItemClass))
</MACRO>
<MACRO>
<NAME>PLANK_IS_APPLICATION_DOCK_ITEM</NAME>
#define PLANK_IS_APPLICATION_DOCK_ITEM(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), PLANK_TYPE_APPLICATION_DOCK_ITEM))
</MACRO>
<MACRO>
<NAME>PLANK_IS_APPLICATION_DOCK_ITEM_CLASS</NAME>
#define PLANK_IS_APPLICATION_DOCK_ITEM_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), PLANK_TYPE_APPLICATION_DOCK_ITEM))
</MACRO>
<MACRO>
<NAME>PLANK_APPLICATION_DOCK_ITEM_GET_CLASS</NAME>
#define PLANK_APPLICATION_DOCK_ITEM_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), PLANK_TYPE_APPLICATION_DOCK_ITEM, PlankApplicationDockItemClass))
</MACRO>
<MACRO>
<NAME>PLANK_TYPE_DBUS_CLIENT</NAME>
#define PLANK_TYPE_DBUS_CLIENT (plank_dbus_client_get_type ())
</MACRO>
<MACRO>
<NAME>PLANK_DBUS_CLIENT</NAME>
#define PLANK_DBUS_CLIENT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), PLANK_TYPE_DBUS_CLIENT, PlankDBusClient))
</MACRO>
<MACRO>
<NAME>PLANK_DBUS_CLIENT_CLASS</NAME>
#define PLANK_DBUS_CLIENT_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), PLANK_TYPE_DBUS_CLIENT, PlankDBusClientClass))
</MACRO>
<MACRO>
<NAME>PLANK_IS_DBUS_CLIENT</NAME>
#define PLANK_IS_DBUS_CLIENT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), PLANK_TYPE_DBUS_CLIENT))
</MACRO>
<MACRO>
<NAME>PLANK_IS_DBUS_CLIENT_CLASS</NAME>
#define PLANK_IS_DBUS_CLIENT_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), PLANK_TYPE_DBUS_CLIENT))
</MACRO>
<MACRO>
<NAME>PLANK_DBUS_CLIENT_GET_CLASS</NAME>
#define PLANK_DBUS_CLIENT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), PLANK_TYPE_DBUS_CLIENT, PlankDBusClientClass))
</MACRO>
<MACRO>
<NAME>PLANK_TYPE_DOCKLET</NAME>
#define PLANK_TYPE_DOCKLET (plank_docklet_get_type ())
</MACRO>
<MACRO>
<NAME>PLANK_DOCKLET</NAME>
#define PLANK_DOCKLET(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), PLANK_TYPE_DOCKLET, PlankDocklet))
</MACRO>
<MACRO>
<NAME>PLANK_IS_DOCKLET</NAME>
#define PLANK_IS_DOCKLET(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), PLANK_TYPE_DOCKLET))
</MACRO>
<MACRO>
<NAME>PLANK_DOCKLET_GET_INTERFACE</NAME>
#define PLANK_DOCKLET_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), PLANK_TYPE_DOCKLET, PlankDockletIface))
</MACRO>
<MACRO>
<NAME>PLANK_TYPE_SURFACE</NAME>
#define PLANK_TYPE_SURFACE (plank_surface_get_type ())
</MACRO>
<MACRO>
<NAME>PLANK_SURFACE</NAME>
#define PLANK_SURFACE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), PLANK_TYPE_SURFACE, PlankSurface))
</MACRO>
<MACRO>
<NAME>PLANK_SURFACE_CLASS</NAME>
#define PLANK_SURFACE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), PLANK_TYPE_SURFACE, PlankSurfaceClass))
</MACRO>
<MACRO>
<NAME>PLANK_IS_SURFACE</NAME>
#define PLANK_IS_SURFACE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), PLANK_TYPE_SURFACE))
</MACRO>
<MACRO>
<NAME>PLANK_IS_SURFACE_CLASS</NAME>
#define PLANK_IS_SURFACE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), PLANK_TYPE_SURFACE))
</MACRO>
<MACRO>
<NAME>PLANK_SURFACE_GET_CLASS</NAME>
#define PLANK_SURFACE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), PLANK_TYPE_SURFACE, PlankSurfaceClass))
</MACRO>
<MACRO>
<NAME>PLANK_TYPE_DOCKLET_ITEM</NAME>
#define PLANK_TYPE_DOCKLET_ITEM (plank_docklet_item_get_type ())
</MACRO>
<MACRO>
<NAME>PLANK_DOCKLET_ITEM</NAME>
#define PLANK_DOCKLET_ITEM(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), PLANK_TYPE_DOCKLET_ITEM, PlankDockletItem))
</MACRO>
<MACRO>
<NAME>PLANK_DOCKLET_ITEM_CLASS</NAME>
#define PLANK_DOCKLET_ITEM_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), PLANK_TYPE_DOCKLET_ITEM, PlankDockletItemClass))
</MACRO>
<MACRO>
<NAME>PLANK_IS_DOCKLET_ITEM</NAME>
#define PLANK_IS_DOCKLET_ITEM(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), PLANK_TYPE_DOCKLET_ITEM))
</MACRO>
<MACRO>
<NAME>PLANK_IS_DOCKLET_ITEM_CLASS</NAME>
#define PLANK_IS_DOCKLET_ITEM_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), PLANK_TYPE_DOCKLET_ITEM))
</MACRO>
<MACRO>
<NAME>PLANK_DOCKLET_ITEM_GET_CLASS</NAME>
#define PLANK_DOCKLET_ITEM_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), PLANK_TYPE_DOCKLET_ITEM, PlankDockletItemClass))
</MACRO>
<MACRO>
<NAME>PLANK_TYPE_DOCKLET_MANAGER</NAME>
#define PLANK_TYPE_DOCKLET_MANAGER (plank_docklet_manager_get_type ())
</MACRO>
<MACRO>
<NAME>PLANK_DOCKLET_MANAGER</NAME>
#define PLANK_DOCKLET_MANAGER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), PLANK_TYPE_DOCKLET_MANAGER, PlankDockletManager))
</MACRO>
<MACRO>
<NAME>PLANK_DOCKLET_MANAGER_CLASS</NAME>
#define PLANK_DOCKLET_MANAGER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), PLANK_TYPE_DOCKLET_MANAGER, PlankDockletManagerClass))
</MACRO>
<MACRO>
<NAME>PLANK_IS_DOCKLET_MANAGER</NAME>
#define PLANK_IS_DOCKLET_MANAGER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), PLANK_TYPE_DOCKLET_MANAGER))
</MACRO>
<MACRO>
<NAME>PLANK_IS_DOCKLET_MANAGER_CLASS</NAME>
#define PLANK_IS_DOCKLET_MANAGER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), PLANK_TYPE_DOCKLET_MANAGER))
</MACRO>
<MACRO>
<NAME>PLANK_DOCKLET_MANAGER_GET_CLASS</NAME>
#define PLANK_DOCKLET_MANAGER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), PLANK_TYPE_DOCKLET_MANAGER, PlankDockletManagerClass))
</MACRO>
<USER_FUNCTION>
<NAME>PlankDockletInitFunc</NAME>
<RETURNS>void</RETURNS>
PlankDockletManager* manager, gpointer user_data
</USER_FUNCTION>
<MACRO>
<NAME>PLANK_TYPE_COLOR</NAME>
#define PLANK_TYPE_COLOR (plank_color_get_type ())
</MACRO>
<TYPEDEF>
<NAME>PlankColor</NAME>
typedef GdkRGBA PlankColor;
</TYPEDEF>
<MACRO>
<NAME>PLANK_TYPE_DRAWING_SERVICE</NAME>
#define PLANK_TYPE_DRAWING_SERVICE (plank_drawing_service_get_type ())
</MACRO>
<MACRO>
<NAME>PLANK_DRAWING_SERVICE</NAME>
#define PLANK_DRAWING_SERVICE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), PLANK_TYPE_DRAWING_SERVICE, PlankDrawingService))
</MACRO>
<MACRO>
<NAME>PLANK_DRAWING_SERVICE_CLASS</NAME>
#define PLANK_DRAWING_SERVICE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), PLANK_TYPE_DRAWING_SERVICE, PlankDrawingServiceClass))
</MACRO>
<MACRO>
<NAME>PLANK_IS_DRAWING_SERVICE</NAME>
#define PLANK_IS_DRAWING_SERVICE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), PLANK_TYPE_DRAWING_SERVICE))
</MACRO>
<MACRO>
<NAME>PLANK_IS_DRAWING_SERVICE_CLASS</NAME>
#define PLANK_IS_DRAWING_SERVICE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), PLANK_TYPE_DRAWING_SERVICE))
</MACRO>
<MACRO>
<NAME>PLANK_DRAWING_SERVICE_GET_CLASS</NAME>
#define PLANK_DRAWING_SERVICE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), PLANK_TYPE_DRAWING_SERVICE, PlankDrawingServiceClass))
</MACRO>
<ENUM>
<NAME>PlankIndicatorState</NAME>
typedef enum  {
	PLANK_INDICATOR_STATE_NONE,
	PLANK_INDICATOR_STATE_SINGLE,
	PLANK_INDICATOR_STATE_SINGLE_PLUS
} PlankIndicatorState;
</ENUM>
<MACRO>
<NAME>PLANK_TYPE_INDICATOR_STATE</NAME>
#define PLANK_TYPE_INDICATOR_STATE (plank_indicator_state_get_type ())
</MACRO>
<ENUM>
<NAME>PlankItemState</NAME>
typedef enum  {
	PLANK_ITEM_STATE_NORMAL = 1 << 0,
	PLANK_ITEM_STATE_ACTIVE = 1 << 1,
	PLANK_ITEM_STATE_URGENT = 1 << 2,
	PLANK_ITEM_STATE_MOVE = 1 << 3,
	PLANK_ITEM_STATE_INVALID = 1 << 4
} PlankItemState;
</ENUM>
<MACRO>
<NAME>PLANK_TYPE_ITEM_STATE</NAME>
#define PLANK_TYPE_ITEM_STATE (plank_item_state_get_type ())
</MACRO>
<ENUM>
<NAME>PlankIndicatorStyleType</NAME>
typedef enum  {
	PLANK_INDICATOR_STYLE_TYPE_LEGACY,
	PLANK_INDICATOR_STYLE_TYPE_GLOW,
	PLANK_INDICATOR_STYLE_TYPE_CIRCLE,
	PLANK_INDICATOR_STYLE_TYPE_LINE
} PlankIndicatorStyleType;
</ENUM>
<MACRO>
<NAME>PLANK_TYPE_INDICATOR_STYLE_TYPE</NAME>
#define PLANK_TYPE_INDICATOR_STYLE_TYPE (plank_indicator_style_type_get_type ())
</MACRO>
<ENUM>
<NAME>PlankActiveItemStyleType</NAME>
typedef enum  {
	PLANK_ACTIVE_ITEM_STYLE_TYPE_LEGACY,
	PLANK_ACTIVE_ITEM_STYLE_TYPE_GRADIENT,
	PLANK_ACTIVE_ITEM_STYLE_TYPE_SOLID
} PlankActiveItemStyleType;
</ENUM>
<MACRO>
<NAME>PLANK_TYPE_ACTIVE_ITEM_STYLE_TYPE</NAME>
#define PLANK_TYPE_ACTIVE_ITEM_STYLE_TYPE (plank_active_item_style_type_get_type ())
</MACRO>
<ENUM>
<NAME>PlankAnimationMode</NAME>
typedef enum  {
	PLANK_ANIMATION_MODE_CUSTOM = 0,
	PLANK_ANIMATION_MODE_LINEAR,
	PLANK_ANIMATION_MODE_EASE_IN_QUAD,
	PLANK_ANIMATION_MODE_EASE_OUT_QUAD,
	PLANK_ANIMATION_MODE_EASE_IN_OUT_QUAD,
	PLANK_ANIMATION_MODE_EASE_IN_CUBIC,
	PLANK_ANIMATION_MODE_EASE_OUT_CUBIC,
	PLANK_ANIMATION_MODE_EASE_IN_OUT_CUBIC,
	PLANK_ANIMATION_MODE_EASE_IN_QUART,
	PLANK_ANIMATION_MODE_EASE_OUT_QUART,
	PLANK_ANIMATION_MODE_EASE_IN_OUT_QUART,
	PLANK_ANIMATION_MODE_EASE_IN_QUINT,
	PLANK_ANIMATION_MODE_EASE_OUT_QUINT,
	PLANK_ANIMATION_MODE_EASE_IN_OUT_QUINT,
	PLANK_ANIMATION_MODE_EASE_IN_SINE,
	PLANK_ANIMATION_MODE_EASE_OUT_SINE,
	PLANK_ANIMATION_MODE_EASE_IN_OUT_SINE,
	PLANK_ANIMATION_MODE_EASE_IN_EXPO,
	PLANK_ANIMATION_MODE_EASE_OUT_EXPO,
	PLANK_ANIMATION_MODE_EASE_IN_OUT_EXPO,
	PLANK_ANIMATION_MODE_EASE_IN_CIRC,
	PLANK_ANIMATION_MODE_EASE_OUT_CIRC,
	PLANK_ANIMATION_MODE_EASE_IN_OUT_CIRC,
	PLANK_ANIMATION_MODE_EASE_IN_ELASTIC,
	PLANK_ANIMATION_MODE_EASE_OUT_ELASTIC,
	PLANK_ANIMATION_MODE_EASE_IN_OUT_ELASTIC,
	PLANK_ANIMATION_MODE_EASE_IN_BACK,
	PLANK_ANIMATION_MODE_EASE_OUT_BACK,
	PLANK_ANIMATION_MODE_EASE_IN_OUT_BACK,
	PLANK_ANIMATION_MODE_EASE_IN_BOUNCE,
	PLANK_ANIMATION_MODE_EASE_OUT_BOUNCE,
	PLANK_ANIMATION_MODE_EASE_IN_OUT_BOUNCE,
	PLANK_ANIMATION_MODE_LAST
} PlankAnimationMode;
</ENUM>
<MACRO>
<NAME>PLANK_TYPE_ANIMATION_MODE</NAME>
#define PLANK_TYPE_ANIMATION_MODE (plank_animation_mode_get_type ())
</MACRO>
<USER_FUNCTION>
<NAME>PlankDrawDataFunc</NAME>
<RETURNS>PlankSurface *</RETURNS>
gint width, gint height, PlankSurface* model, gconstpointer data, gpointer user_data
</USER_FUNCTION>
<USER_FUNCTION>
<NAME>PlankDrawFunc</NAME>
<RETURNS>PlankSurface *</RETURNS>
gint width, gint height, PlankSurface* model, PlankDrawDataFunc draw_data_func, gpointer draw_data_func_target, gpointer user_data
</USER_FUNCTION>
<ENUM>
<NAME>PlankSurfaceCacheFlags</NAME>
typedef enum  {
	PLANK_SURFACE_CACHE_FLAGS_NONE = 0,
	PLANK_SURFACE_CACHE_FLAGS_ALLOW_DOWNSCALE = 1 << 0,
	PLANK_SURFACE_CACHE_FLAGS_ALLOW_UPSCALE = 1 << 1,
	PLANK_SURFACE_CACHE_FLAGS_ALLOW_SCALE = PLANK_SURFACE_CACHE_FLAGS_ALLOW_UPSCALE | PLANK_SURFACE_CACHE_FLAGS_ALLOW_DOWNSCALE,
	PLANK_SURFACE_CACHE_FLAGS_ADAPTIVE_SCALE = 1 << 2
} PlankSurfaceCacheFlags;
</ENUM>
<MACRO>
<NAME>PLANK_TYPE_SURFACE_CACHE_FLAGS</NAME>
#define PLANK_TYPE_SURFACE_CACHE_FLAGS (plank_surface_cache_flags_get_type ())
</MACRO>
<MACRO>
<NAME>PLANK_TYPE_SURFACE_CACHE</NAME>
#define PLANK_TYPE_SURFACE_CACHE (plank_surface_cache_get_type ())
</MACRO>
<MACRO>
<NAME>PLANK_SURFACE_CACHE</NAME>
#define PLANK_SURFACE_CACHE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), PLANK_TYPE_SURFACE_CACHE, PlankSurfaceCache))
</MACRO>
<MACRO>
<NAME>PLANK_SURFACE_CACHE_CLASS</NAME>
#define PLANK_SURFACE_CACHE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), PLANK_TYPE_SURFACE_CACHE, PlankSurfaceCacheClass))
</MACRO>
<MACRO>
<NAME>PLANK_IS_SURFACE_CACHE</NAME>
#define PLANK_IS_SURFACE_CACHE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), PLANK_TYPE_SURFACE_CACHE))
</MACRO>
<MACRO>
<NAME>PLANK_IS_SURFACE_CACHE_CLASS</NAME>
#define PLANK_IS_SURFACE_CACHE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), PLANK_TYPE_SURFACE_CACHE))
</MACRO>
<MACRO>
<NAME>PLANK_SURFACE_CACHE_GET_CLASS</NAME>
#define PLANK_SURFACE_CACHE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), PLANK_TYPE_SURFACE_CACHE, PlankSurfaceCacheClass))
</MACRO>
<MACRO>
<NAME>PLANK_TYPE_ABSTRACT_MAIN</NAME>
#define PLANK_TYPE_ABSTRACT_MAIN (plank_abstract_main_get_type ())
</MACRO>
<MACRO>
<NAME>PLANK_ABSTRACT_MAIN</NAME>
#define PLANK_ABSTRACT_MAIN(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), PLANK_TYPE_ABSTRACT_MAIN, PlankAbstractMain))
</MACRO>
<MACRO>
<NAME>PLANK_ABSTRACT_MAIN_CLASS</NAME>
#define PLANK_ABSTRACT_MAIN_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), PLANK_TYPE_ABSTRACT_MAIN, PlankAbstractMainClass))
</MACRO>
<MACRO>
<NAME>PLANK_IS_ABSTRACT_MAIN</NAME>
#define PLANK_IS_ABSTRACT_MAIN(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), PLANK_TYPE_ABSTRACT_MAIN))
</MACRO>
<MACRO>
<NAME>PLANK_IS_ABSTRACT_MAIN_CLASS</NAME>
#define PLANK_IS_ABSTRACT_MAIN_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), PLANK_TYPE_ABSTRACT_MAIN))
</MACRO>
<MACRO>
<NAME>PLANK_ABSTRACT_MAIN_GET_CLASS</NAME>
#define PLANK_ABSTRACT_MAIN_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), PLANK_TYPE_ABSTRACT_MAIN, PlankAbstractMainClass))
</MACRO>
<MACRO>
<NAME>PLANK_TYPE_FACTORY</NAME>
#define PLANK_TYPE_FACTORY (plank_factory_get_type ())
</MACRO>
<MACRO>
<NAME>PLANK_FACTORY</NAME>
#define PLANK_FACTORY(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), PLANK_TYPE_FACTORY, PlankFactory))
</MACRO>
<MACRO>
<NAME>PLANK_FACTORY_CLASS</NAME>
#define PLANK_FACTORY_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), PLANK_TYPE_FACTORY, PlankFactoryClass))
</MACRO>
<MACRO>
<NAME>PLANK_IS_FACTORY</NAME>
#define PLANK_IS_FACTORY(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), PLANK_TYPE_FACTORY))
</MACRO>
<MACRO>
<NAME>PLANK_IS_FACTORY_CLASS</NAME>
#define PLANK_IS_FACTORY_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), PLANK_TYPE_FACTORY))
</MACRO>
<MACRO>
<NAME>PLANK_FACTORY_GET_CLASS</NAME>
#define PLANK_FACTORY_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), PLANK_TYPE_FACTORY, PlankFactoryClass))
</MACRO>
<MACRO>
<NAME>PLANK_TYPE_ITEM_FACTORY</NAME>
#define PLANK_TYPE_ITEM_FACTORY (plank_item_factory_get_type ())
</MACRO>
<MACRO>
<NAME>PLANK_ITEM_FACTORY</NAME>
#define PLANK_ITEM_FACTORY(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), PLANK_TYPE_ITEM_FACTORY, PlankItemFactory))
</MACRO>
<MACRO>
<NAME>PLANK_ITEM_FACTORY_CLASS</NAME>
#define PLANK_ITEM_FACTORY_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), PLANK_TYPE_ITEM_FACTORY, PlankItemFactoryClass))
</MACRO>
<MACRO>
<NAME>PLANK_IS_ITEM_FACTORY</NAME>
#define PLANK_IS_ITEM_FACTORY(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), PLANK_TYPE_ITEM_FACTORY))
</MACRO>
<MACRO>
<NAME>PLANK_IS_ITEM_FACTORY_CLASS</NAME>
#define PLANK_IS_ITEM_FACTORY_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), PLANK_TYPE_ITEM_FACTORY))
</MACRO>
<MACRO>
<NAME>PLANK_ITEM_FACTORY_GET_CLASS</NAME>
#define PLANK_ITEM_FACTORY_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), PLANK_TYPE_ITEM_FACTORY, PlankItemFactoryClass))
</MACRO>
<MACRO>
<NAME>PLANK_TYPE_UNITY_CLIENT</NAME>
#define PLANK_TYPE_UNITY_CLIENT (plank_unity_client_get_type ())
</MACRO>
<MACRO>
<NAME>PLANK_UNITY_CLIENT</NAME>
#define PLANK_UNITY_CLIENT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), PLANK_TYPE_UNITY_CLIENT, PlankUnityClient))
</MACRO>
<MACRO>
<NAME>PLANK_IS_UNITY_CLIENT</NAME>
#define PLANK_IS_UNITY_CLIENT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), PLANK_TYPE_UNITY_CLIENT))
</MACRO>
<MACRO>
<NAME>PLANK_UNITY_CLIENT_GET_INTERFACE</NAME>
#define PLANK_UNITY_CLIENT_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), PLANK_TYPE_UNITY_CLIENT, PlankUnityClientIface))
</MACRO>
<MACRO>
<NAME>PLANK_TYPE_APPLICATION_DOCK_ITEM_PROVIDER</NAME>
#define PLANK_TYPE_APPLICATION_DOCK_ITEM_PROVIDER (plank_application_dock_item_provider_get_type ())
</MACRO>
<MACRO>
<NAME>PLANK_APPLICATION_DOCK_ITEM_PROVIDER</NAME>
#define PLANK_APPLICATION_DOCK_ITEM_PROVIDER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), PLANK_TYPE_APPLICATION_DOCK_ITEM_PROVIDER, PlankApplicationDockItemProvider))
</MACRO>
<MACRO>
<NAME>PLANK_APPLICATION_DOCK_ITEM_PROVIDER_CLASS</NAME>
#define PLANK_APPLICATION_DOCK_ITEM_PROVIDER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), PLANK_TYPE_APPLICATION_DOCK_ITEM_PROVIDER, PlankApplicationDockItemProviderClass))
</MACRO>
<MACRO>
<NAME>PLANK_IS_APPLICATION_DOCK_ITEM_PROVIDER</NAME>
#define PLANK_IS_APPLICATION_DOCK_ITEM_PROVIDER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), PLANK_TYPE_APPLICATION_DOCK_ITEM_PROVIDER))
</MACRO>
<MACRO>
<NAME>PLANK_IS_APPLICATION_DOCK_ITEM_PROVIDER_CLASS</NAME>
#define PLANK_IS_APPLICATION_DOCK_ITEM_PROVIDER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), PLANK_TYPE_APPLICATION_DOCK_ITEM_PROVIDER))
</MACRO>
<MACRO>
<NAME>PLANK_APPLICATION_DOCK_ITEM_PROVIDER_GET_CLASS</NAME>
#define PLANK_APPLICATION_DOCK_ITEM_PROVIDER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), PLANK_TYPE_APPLICATION_DOCK_ITEM_PROVIDER, PlankApplicationDockItemProviderClass))
</MACRO>
<MACRO>
<NAME>PLANK_TYPE_DEFAULT_APPLICATION_DOCK_ITEM_PROVIDER</NAME>
#define PLANK_TYPE_DEFAULT_APPLICATION_DOCK_ITEM_PROVIDER (plank_default_application_dock_item_provider_get_type ())
</MACRO>
<MACRO>
<NAME>PLANK_DEFAULT_APPLICATION_DOCK_ITEM_PROVIDER</NAME>
#define PLANK_DEFAULT_APPLICATION_DOCK_ITEM_PROVIDER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), PLANK_TYPE_DEFAULT_APPLICATION_DOCK_ITEM_PROVIDER, PlankDefaultApplicationDockItemProvider))
</MACRO>
<MACRO>
<NAME>PLANK_DEFAULT_APPLICATION_DOCK_ITEM_PROVIDER_CLASS</NAME>
#define PLANK_DEFAULT_APPLICATION_DOCK_ITEM_PROVIDER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), PLANK_TYPE_DEFAULT_APPLICATION_DOCK_ITEM_PROVIDER, PlankDefaultApplicationDockItemProviderClass))
</MACRO>
<MACRO>
<NAME>PLANK_IS_DEFAULT_APPLICATION_DOCK_ITEM_PROVIDER</NAME>
#define PLANK_IS_DEFAULT_APPLICATION_DOCK_ITEM_PROVIDER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), PLANK_TYPE_DEFAULT_APPLICATION_DOCK_ITEM_PROVIDER))
</MACRO>
<MACRO>
<NAME>PLANK_IS_DEFAULT_APPLICATION_DOCK_ITEM_PROVIDER_CLASS</NAME>
#define PLANK_IS_DEFAULT_APPLICATION_DOCK_ITEM_PROVIDER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), PLANK_TYPE_DEFAULT_APPLICATION_DOCK_ITEM_PROVIDER))
</MACRO>
<MACRO>
<NAME>PLANK_DEFAULT_APPLICATION_DOCK_ITEM_PROVIDER_GET_CLASS</NAME>
#define PLANK_DEFAULT_APPLICATION_DOCK_ITEM_PROVIDER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), PLANK_TYPE_DEFAULT_APPLICATION_DOCK_ITEM_PROVIDER, PlankDefaultApplicationDockItemProviderClass))
</MACRO>
<MACRO>
<NAME>PLANK_TYPE_PLACEHOLDER_DOCK_ITEM</NAME>
#define PLANK_TYPE_PLACEHOLDER_DOCK_ITEM (plank_placeholder_dock_item_get_type ())
</MACRO>
<MACRO>
<NAME>PLANK_PLACEHOLDER_DOCK_ITEM</NAME>
#define PLANK_PLACEHOLDER_DOCK_ITEM(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), PLANK_TYPE_PLACEHOLDER_DOCK_ITEM, PlankPlaceholderDockItem))
</MACRO>
<MACRO>
<NAME>PLANK_PLACEHOLDER_DOCK_ITEM_CLASS</NAME>
#define PLANK_PLACEHOLDER_DOCK_ITEM_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), PLANK_TYPE_PLACEHOLDER_DOCK_ITEM, PlankPlaceholderDockItemClass))
</MACRO>
<MACRO>
<NAME>PLANK_IS_PLACEHOLDER_DOCK_ITEM</NAME>
#define PLANK_IS_PLACEHOLDER_DOCK_ITEM(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), PLANK_TYPE_PLACEHOLDER_DOCK_ITEM))
</MACRO>
<MACRO>
<NAME>PLANK_IS_PLACEHOLDER_DOCK_ITEM_CLASS</NAME>
#define PLANK_IS_PLACEHOLDER_DOCK_ITEM_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), PLANK_TYPE_PLACEHOLDER_DOCK_ITEM))
</MACRO>
<MACRO>
<NAME>PLANK_PLACEHOLDER_DOCK_ITEM_GET_CLASS</NAME>
#define PLANK_PLACEHOLDER_DOCK_ITEM_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), PLANK_TYPE_PLACEHOLDER_DOCK_ITEM, PlankPlaceholderDockItemClass))
</MACRO>
<MACRO>
<NAME>PLANK_TYPE_DOCK_ITEM_PREFERENCES</NAME>
#define PLANK_TYPE_DOCK_ITEM_PREFERENCES (plank_dock_item_preferences_get_type ())
</MACRO>
<MACRO>
<NAME>PLANK_DOCK_ITEM_PREFERENCES</NAME>
#define PLANK_DOCK_ITEM_PREFERENCES(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), PLANK_TYPE_DOCK_ITEM_PREFERENCES, PlankDockItemPreferences))
</MACRO>
<MACRO>
<NAME>PLANK_DOCK_ITEM_PREFERENCES_CLASS</NAME>
#define PLANK_DOCK_ITEM_PREFERENCES_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), PLANK_TYPE_DOCK_ITEM_PREFERENCES, PlankDockItemPreferencesClass))
</MACRO>
<MACRO>
<NAME>PLANK_IS_DOCK_ITEM_PREFERENCES</NAME>
#define PLANK_IS_DOCK_ITEM_PREFERENCES(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), PLANK_TYPE_DOCK_ITEM_PREFERENCES))
</MACRO>
<MACRO>
<NAME>PLANK_IS_DOCK_ITEM_PREFERENCES_CLASS</NAME>
#define PLANK_IS_DOCK_ITEM_PREFERENCES_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), PLANK_TYPE_DOCK_ITEM_PREFERENCES))
</MACRO>
<MACRO>
<NAME>PLANK_DOCK_ITEM_PREFERENCES_GET_CLASS</NAME>
#define PLANK_DOCK_ITEM_PREFERENCES_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), PLANK_TYPE_DOCK_ITEM_PREFERENCES, PlankDockItemPreferencesClass))
</MACRO>
<MACRO>
<NAME>PLANK_TYPE_POINT_D</NAME>
#define PLANK_TYPE_POINT_D (plank_point_d_get_type ())
</MACRO>
<ENUM>
<NAME>PlankUpdateIndicatorEvent</NAME>
typedef enum  {
	PLANK_UPDATE_INDICATOR_EVENT_INITIALIZE,
	PLANK_UPDATE_INDICATOR_EVENT_WINDOW_ADDED,
	PLANK_UPDATE_INDICATOR_EVENT_WINDOW_REMOVED,
	PLANK_UPDATE_INDICATOR_EVENT_RUNNING_CHANGED
} PlankUpdateIndicatorEvent;
</ENUM>
<MACRO>
<NAME>PLANK_TYPE_UPDATE_INDICATOR_EVENT</NAME>
#define PLANK_TYPE_UPDATE_INDICATOR_EVENT (plank_update_indicator_event_get_type ())
</MACRO>
<MACRO>
<NAME>PLANK_TYPE_FILE_DOCK_ITEM</NAME>
#define PLANK_TYPE_FILE_DOCK_ITEM (plank_file_dock_item_get_type ())
</MACRO>
<MACRO>
<NAME>PLANK_FILE_DOCK_ITEM</NAME>
#define PLANK_FILE_DOCK_ITEM(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), PLANK_TYPE_FILE_DOCK_ITEM, PlankFileDockItem))
</MACRO>
<MACRO>
<NAME>PLANK_FILE_DOCK_ITEM_CLASS</NAME>
#define PLANK_FILE_DOCK_ITEM_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), PLANK_TYPE_FILE_DOCK_ITEM, PlankFileDockItemClass))
</MACRO>
<MACRO>
<NAME>PLANK_IS_FILE_DOCK_ITEM</NAME>
#define PLANK_IS_FILE_DOCK_ITEM(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), PLANK_TYPE_FILE_DOCK_ITEM))
</MACRO>
<MACRO>
<NAME>PLANK_IS_FILE_DOCK_ITEM_CLASS</NAME>
#define PLANK_IS_FILE_DOCK_ITEM_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), PLANK_TYPE_FILE_DOCK_ITEM))
</MACRO>
<MACRO>
<NAME>PLANK_FILE_DOCK_ITEM_GET_CLASS</NAME>
#define PLANK_FILE_DOCK_ITEM_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), PLANK_TYPE_FILE_DOCK_ITEM, PlankFileDockItemClass))
</MACRO>
<MACRO>
<NAME>PLANK_FILE_DOCK_ITEM_TYPE_FILE_SORT_DATA</NAME>
#define PLANK_FILE_DOCK_ITEM_TYPE_FILE_SORT_DATA (plank_file_dock_item_file_sort_data_get_type ())
</MACRO>
<MACRO>
<NAME>PLANK_FILE_DOCK_ITEM_FILE_SORT_DATA</NAME>
#define PLANK_FILE_DOCK_ITEM_FILE_SORT_DATA(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), PLANK_FILE_DOCK_ITEM_TYPE_FILE_SORT_DATA, PlankFileDockItemFileSortData))
</MACRO>
<MACRO>
<NAME>PLANK_FILE_DOCK_ITEM_FILE_SORT_DATA_CLASS</NAME>
#define PLANK_FILE_DOCK_ITEM_FILE_SORT_DATA_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), PLANK_FILE_DOCK_ITEM_TYPE_FILE_SORT_DATA, PlankFileDockItemFileSortDataClass))
</MACRO>
<MACRO>
<NAME>PLANK_FILE_DOCK_ITEM_IS_FILE_SORT_DATA</NAME>
#define PLANK_FILE_DOCK_ITEM_IS_FILE_SORT_DATA(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), PLANK_FILE_DOCK_ITEM_TYPE_FILE_SORT_DATA))
</MACRO>
<MACRO>
<NAME>PLANK_FILE_DOCK_ITEM_IS_FILE_SORT_DATA_CLASS</NAME>
#define PLANK_FILE_DOCK_ITEM_IS_FILE_SORT_DATA_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), PLANK_FILE_DOCK_ITEM_TYPE_FILE_SORT_DATA))
</MACRO>
<MACRO>
<NAME>PLANK_FILE_DOCK_ITEM_FILE_SORT_DATA_GET_CLASS</NAME>
#define PLANK_FILE_DOCK_ITEM_FILE_SORT_DATA_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), PLANK_FILE_DOCK_ITEM_TYPE_FILE_SORT_DATA, PlankFileDockItemFileSortDataClass))
</MACRO>
<MACRO>
<NAME>PLANK_TYPE_PLANK_DOCK_ITEM</NAME>
#define PLANK_TYPE_PLANK_DOCK_ITEM (plank_plank_dock_item_get_type ())
</MACRO>
<MACRO>
<NAME>PLANK_PLANK_DOCK_ITEM</NAME>
#define PLANK_PLANK_DOCK_ITEM(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), PLANK_TYPE_PLANK_DOCK_ITEM, PlankPlankDockItem))
</MACRO>
<MACRO>
<NAME>PLANK_PLANK_DOCK_ITEM_CLASS</NAME>
#define PLANK_PLANK_DOCK_ITEM_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), PLANK_TYPE_PLANK_DOCK_ITEM, PlankPlankDockItemClass))
</MACRO>
<MACRO>
<NAME>PLANK_IS_PLANK_DOCK_ITEM</NAME>
#define PLANK_IS_PLANK_DOCK_ITEM(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), PLANK_TYPE_PLANK_DOCK_ITEM))
</MACRO>
<MACRO>
<NAME>PLANK_IS_PLANK_DOCK_ITEM_CLASS</NAME>
#define PLANK_IS_PLANK_DOCK_ITEM_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), PLANK_TYPE_PLANK_DOCK_ITEM))
</MACRO>
<MACRO>
<NAME>PLANK_PLANK_DOCK_ITEM_GET_CLASS</NAME>
#define PLANK_PLANK_DOCK_ITEM_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), PLANK_TYPE_PLANK_DOCK_ITEM, PlankPlankDockItemClass))
</MACRO>
<MACRO>
<NAME>PLANK_TYPE_TRANSIENT_DOCK_ITEM</NAME>
#define PLANK_TYPE_TRANSIENT_DOCK_ITEM (plank_transient_dock_item_get_type ())
</MACRO>
<MACRO>
<NAME>PLANK_TRANSIENT_DOCK_ITEM</NAME>
#define PLANK_TRANSIENT_DOCK_ITEM(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), PLANK_TYPE_TRANSIENT_DOCK_ITEM, PlankTransientDockItem))
</MACRO>
<MACRO>
<NAME>PLANK_TRANSIENT_DOCK_ITEM_CLASS</NAME>
#define PLANK_TRANSIENT_DOCK_ITEM_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), PLANK_TYPE_TRANSIENT_DOCK_ITEM, PlankTransientDockItemClass))
</MACRO>
<MACRO>
<NAME>PLANK_IS_TRANSIENT_DOCK_ITEM</NAME>
#define PLANK_IS_TRANSIENT_DOCK_ITEM(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), PLANK_TYPE_TRANSIENT_DOCK_ITEM))
</MACRO>
<MACRO>
<NAME>PLANK_IS_TRANSIENT_DOCK_ITEM_CLASS</NAME>
#define PLANK_IS_TRANSIENT_DOCK_ITEM_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), PLANK_TYPE_TRANSIENT_DOCK_ITEM))
</MACRO>
<MACRO>
<NAME>PLANK_TRANSIENT_DOCK_ITEM_GET_CLASS</NAME>
#define PLANK_TRANSIENT_DOCK_ITEM_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), PLANK_TYPE_TRANSIENT_DOCK_ITEM, PlankTransientDockItemClass))
</MACRO>
<ENUM>
<NAME>PlankXdgSessionClass</NAME>
typedef enum  {
	PLANK_XDG_SESSION_CLASS_USER,
	PLANK_XDG_SESSION_CLASS_GREETER,
	PLANK_XDG_SESSION_CLASS_LOCK_SCREEN,
	PLANK_XDG_SESSION_CLASS_BACKGROUND
} PlankXdgSessionClass;
</ENUM>
<MACRO>
<NAME>PLANK_TYPE_XDG_SESSION_CLASS</NAME>
#define PLANK_TYPE_XDG_SESSION_CLASS (plank_xdg_session_class_get_type ())
</MACRO>
<ENUM>
<NAME>PlankXdgSessionDesktop</NAME>
typedef enum  {
	PLANK_XDG_SESSION_DESKTOP_UNKNOWN = 0,
	PLANK_XDG_SESSION_DESKTOP_GNOME = 1 << 0,
	PLANK_XDG_SESSION_DESKTOP_KDE = 1 << 1,
	PLANK_XDG_SESSION_DESKTOP_LXDE = 1 << 2,
	PLANK_XDG_SESSION_DESKTOP_MATE = 1 << 3,
	PLANK_XDG_SESSION_DESKTOP_RAZOR = 1 << 4,
	PLANK_XDG_SESSION_DESKTOP_ROX = 1 << 5,
	PLANK_XDG_SESSION_DESKTOP_TDE = 1 << 6,
	PLANK_XDG_SESSION_DESKTOP_UNITY = 1 << 7,
	PLANK_XDG_SESSION_DESKTOP_XFCE = 1 << 8,
	PLANK_XDG_SESSION_DESKTOP_EDE = 1 << 9,
	PLANK_XDG_SESSION_DESKTOP_CINNAMON = 1 << 10,
	PLANK_XDG_SESSION_DESKTOP_PANTHEON = 1 << 11,
	PLANK_XDG_SESSION_DESKTOP_DDE = 1 << 12,
	PLANK_XDG_SESSION_DESKTOP_ENDLESS = 1 << 13,
	PLANK_XDG_SESSION_DESKTOP_OLD = 1 << 24,
	PLANK_XDG_SESSION_DESKTOP_UBUNTU = 1 << 25
} PlankXdgSessionDesktop;
</ENUM>
<MACRO>
<NAME>PLANK_TYPE_XDG_SESSION_DESKTOP</NAME>
#define PLANK_TYPE_XDG_SESSION_DESKTOP (plank_xdg_session_desktop_get_type ())
</MACRO>
<ENUM>
<NAME>PlankXdgSessionType</NAME>
typedef enum  {
	PLANK_XDG_SESSION_TYPE_UNSPECIFIED,
	PLANK_XDG_SESSION_TYPE_TTY,
	PLANK_XDG_SESSION_TYPE_X11,
	PLANK_XDG_SESSION_TYPE_WAYLAND,
	PLANK_XDG_SESSION_TYPE_MIR
} PlankXdgSessionType;
</ENUM>
<MACRO>
<NAME>PLANK_TYPE_XDG_SESSION_TYPE</NAME>
#define PLANK_TYPE_XDG_SESSION_TYPE (plank_xdg_session_type_get_type ())
</MACRO>
<ENUM>
<NAME>PlankLogLevel</NAME>
typedef enum  {
	PLANK_LOG_LEVEL_VERBOSE,
	PLANK_LOG_LEVEL_DEBUG,
	PLANK_LOG_LEVEL_INFO,
	PLANK_LOG_LEVEL_NOTIFY,
	PLANK_LOG_LEVEL_WARN,
	PLANK_LOG_LEVEL_CRITICAL,
	PLANK_LOG_LEVEL_ERROR
} PlankLogLevel;
</ENUM>
<MACRO>
<NAME>PLANK_TYPE_LOG_LEVEL</NAME>
#define PLANK_TYPE_LOG_LEVEL (plank_log_level_get_type ())
</MACRO>
<MACRO>
<NAME>PLANK_TYPE_LOGGER</NAME>
#define PLANK_TYPE_LOGGER (plank_logger_get_type ())
</MACRO>
<MACRO>
<NAME>PLANK_LOGGER</NAME>
#define PLANK_LOGGER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), PLANK_TYPE_LOGGER, PlankLogger))
</MACRO>
<MACRO>
<NAME>PLANK_LOGGER_CLASS</NAME>
#define PLANK_LOGGER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), PLANK_TYPE_LOGGER, PlankLoggerClass))
</MACRO>
<MACRO>
<NAME>PLANK_IS_LOGGER</NAME>
#define PLANK_IS_LOGGER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), PLANK_TYPE_LOGGER))
</MACRO>
<MACRO>
<NAME>PLANK_IS_LOGGER_CLASS</NAME>
#define PLANK_IS_LOGGER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), PLANK_TYPE_LOGGER))
</MACRO>
<MACRO>
<NAME>PLANK_LOGGER_GET_CLASS</NAME>
#define PLANK_LOGGER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), PLANK_TYPE_LOGGER, PlankLoggerClass))
</MACRO>
<MACRO>
<NAME>PLANK_TYPE_PATHS</NAME>
#define PLANK_TYPE_PATHS (plank_paths_get_type ())
</MACRO>
<MACRO>
<NAME>PLANK_PATHS</NAME>
#define PLANK_PATHS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), PLANK_TYPE_PATHS, PlankPaths))
</MACRO>
<MACRO>
<NAME>PLANK_PATHS_CLASS</NAME>
#define PLANK_PATHS_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), PLANK_TYPE_PATHS, PlankPathsClass))
</MACRO>
<MACRO>
<NAME>PLANK_IS_PATHS</NAME>
#define PLANK_IS_PATHS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), PLANK_TYPE_PATHS))
</MACRO>
<MACRO>
<NAME>PLANK_IS_PATHS_CLASS</NAME>
#define PLANK_IS_PATHS_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), PLANK_TYPE_PATHS))
</MACRO>
<MACRO>
<NAME>PLANK_PATHS_GET_CLASS</NAME>
#define PLANK_PATHS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), PLANK_TYPE_PATHS, PlankPathsClass))
</MACRO>
<MACRO>
<NAME>PLANK_TYPE_SERIALIZABLE</NAME>
#define PLANK_TYPE_SERIALIZABLE (plank_serializable_get_type ())
</MACRO>
<MACRO>
<NAME>PLANK_SERIALIZABLE</NAME>
#define PLANK_SERIALIZABLE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), PLANK_TYPE_SERIALIZABLE, PlankSerializable))
</MACRO>
<MACRO>
<NAME>PLANK_IS_SERIALIZABLE</NAME>
#define PLANK_IS_SERIALIZABLE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), PLANK_TYPE_SERIALIZABLE))
</MACRO>
<MACRO>
<NAME>PLANK_SERIALIZABLE_GET_INTERFACE</NAME>
#define PLANK_SERIALIZABLE_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), PLANK_TYPE_SERIALIZABLE, PlankSerializableIface))
</MACRO>
<MACRO>
<NAME>PLANK_TYPE_SYSTEM</NAME>
#define PLANK_TYPE_SYSTEM (plank_system_get_type ())
</MACRO>
<MACRO>
<NAME>PLANK_SYSTEM</NAME>
#define PLANK_SYSTEM(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), PLANK_TYPE_SYSTEM, PlankSystem))
</MACRO>
<MACRO>
<NAME>PLANK_SYSTEM_CLASS</NAME>
#define PLANK_SYSTEM_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), PLANK_TYPE_SYSTEM, PlankSystemClass))
</MACRO>
<MACRO>
<NAME>PLANK_IS_SYSTEM</NAME>
#define PLANK_IS_SYSTEM(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), PLANK_TYPE_SYSTEM))
</MACRO>
<MACRO>
<NAME>PLANK_IS_SYSTEM_CLASS</NAME>
#define PLANK_IS_SYSTEM_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), PLANK_TYPE_SYSTEM))
</MACRO>
<MACRO>
<NAME>PLANK_SYSTEM_GET_CLASS</NAME>
#define PLANK_SYSTEM_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), PLANK_TYPE_SYSTEM, PlankSystemClass))
</MACRO>
<MACRO>
<NAME>PLANK_TYPE_UNITY</NAME>
#define PLANK_TYPE_UNITY (plank_unity_get_type ())
</MACRO>
<MACRO>
<NAME>PLANK_UNITY</NAME>
#define PLANK_UNITY(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), PLANK_TYPE_UNITY, PlankUnity))
</MACRO>
<MACRO>
<NAME>PLANK_UNITY_CLASS</NAME>
#define PLANK_UNITY_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), PLANK_TYPE_UNITY, PlankUnityClass))
</MACRO>
<MACRO>
<NAME>PLANK_IS_UNITY</NAME>
#define PLANK_IS_UNITY(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), PLANK_TYPE_UNITY))
</MACRO>
<MACRO>
<NAME>PLANK_IS_UNITY_CLASS</NAME>
#define PLANK_IS_UNITY_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), PLANK_TYPE_UNITY))
</MACRO>
<MACRO>
<NAME>PLANK_UNITY_GET_CLASS</NAME>
#define PLANK_UNITY_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), PLANK_TYPE_UNITY, PlankUnityClass))
</MACRO>
<ENUM>
<NAME>PlankTaskPriority</NAME>
typedef enum  {
	PLANK_TASK_PRIORITY_LOW,
	PLANK_TASK_PRIORITY_DEFAULT,
	PLANK_TASK_PRIORITY_HIGH
} PlankTaskPriority;
</ENUM>
<MACRO>
<NAME>PLANK_TYPE_TASK_PRIORITY</NAME>
#define PLANK_TYPE_TASK_PRIORITY (plank_task_priority_get_type ())
</MACRO>
<USER_FUNCTION>
<NAME>PlankTaskFunc</NAME>
<RETURNS>gpointer</RETURNS>
gpointer user_data, GError** error
</USER_FUNCTION>
<MACRO>
<NAME>PLANK_TYPE_WORKER</NAME>
#define PLANK_TYPE_WORKER (plank_worker_get_type ())
</MACRO>
<MACRO>
<NAME>PLANK_WORKER</NAME>
#define PLANK_WORKER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), PLANK_TYPE_WORKER, PlankWorker))
</MACRO>
<MACRO>
<NAME>PLANK_WORKER_CLASS</NAME>
#define PLANK_WORKER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), PLANK_TYPE_WORKER, PlankWorkerClass))
</MACRO>
<MACRO>
<NAME>PLANK_IS_WORKER</NAME>
#define PLANK_IS_WORKER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), PLANK_TYPE_WORKER))
</MACRO>
<MACRO>
<NAME>PLANK_IS_WORKER_CLASS</NAME>
#define PLANK_IS_WORKER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), PLANK_TYPE_WORKER))
</MACRO>
<MACRO>
<NAME>PLANK_WORKER_GET_CLASS</NAME>
#define PLANK_WORKER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), PLANK_TYPE_WORKER, PlankWorkerClass))
</MACRO>
<MACRO>
<NAME>PLANK_TYPE_POOF_WINDOW</NAME>
#define PLANK_TYPE_POOF_WINDOW (plank_poof_window_get_type ())
</MACRO>
<MACRO>
<NAME>PLANK_POOF_WINDOW</NAME>
#define PLANK_POOF_WINDOW(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), PLANK_TYPE_POOF_WINDOW, PlankPoofWindow))
</MACRO>
<MACRO>
<NAME>PLANK_POOF_WINDOW_CLASS</NAME>
#define PLANK_POOF_WINDOW_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), PLANK_TYPE_POOF_WINDOW, PlankPoofWindowClass))
</MACRO>
<MACRO>
<NAME>PLANK_IS_POOF_WINDOW</NAME>
#define PLANK_IS_POOF_WINDOW(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), PLANK_TYPE_POOF_WINDOW))
</MACRO>
<MACRO>
<NAME>PLANK_IS_POOF_WINDOW_CLASS</NAME>
#define PLANK_IS_POOF_WINDOW_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), PLANK_TYPE_POOF_WINDOW))
</MACRO>
<MACRO>
<NAME>PLANK_POOF_WINDOW_GET_CLASS</NAME>
#define PLANK_POOF_WINDOW_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), PLANK_TYPE_POOF_WINDOW, PlankPoofWindowClass))
</MACRO>
<MACRO>
<NAME>PLANK_TYPE_PREFERENCES_WINDOW</NAME>
#define PLANK_TYPE_PREFERENCES_WINDOW (plank_preferences_window_get_type ())
</MACRO>
<MACRO>
<NAME>PLANK_PREFERENCES_WINDOW</NAME>
#define PLANK_PREFERENCES_WINDOW(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), PLANK_TYPE_PREFERENCES_WINDOW, PlankPreferencesWindow))
</MACRO>
<MACRO>
<NAME>PLANK_PREFERENCES_WINDOW_CLASS</NAME>
#define PLANK_PREFERENCES_WINDOW_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), PLANK_TYPE_PREFERENCES_WINDOW, PlankPreferencesWindowClass))
</MACRO>
<MACRO>
<NAME>PLANK_IS_PREFERENCES_WINDOW</NAME>
#define PLANK_IS_PREFERENCES_WINDOW(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), PLANK_TYPE_PREFERENCES_WINDOW))
</MACRO>
<MACRO>
<NAME>PLANK_IS_PREFERENCES_WINDOW_CLASS</NAME>
#define PLANK_IS_PREFERENCES_WINDOW_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), PLANK_TYPE_PREFERENCES_WINDOW))
</MACRO>
<MACRO>
<NAME>PLANK_PREFERENCES_WINDOW_GET_CLASS</NAME>
#define PLANK_PREFERENCES_WINDOW_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), PLANK_TYPE_PREFERENCES_WINDOW, PlankPreferencesWindowClass))
</MACRO>
<MACRO>
<NAME>PLANK_TYPE_TITLED_SEPARATOR_MENU_ITEM</NAME>
#define PLANK_TYPE_TITLED_SEPARATOR_MENU_ITEM (plank_titled_separator_menu_item_get_type ())
</MACRO>
<MACRO>
<NAME>PLANK_TITLED_SEPARATOR_MENU_ITEM</NAME>
#define PLANK_TITLED_SEPARATOR_MENU_ITEM(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), PLANK_TYPE_TITLED_SEPARATOR_MENU_ITEM, PlankTitledSeparatorMenuItem))
</MACRO>
<MACRO>
<NAME>PLANK_TITLED_SEPARATOR_MENU_ITEM_CLASS</NAME>
#define PLANK_TITLED_SEPARATOR_MENU_ITEM_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), PLANK_TYPE_TITLED_SEPARATOR_MENU_ITEM, PlankTitledSeparatorMenuItemClass))
</MACRO>
<MACRO>
<NAME>PLANK_IS_TITLED_SEPARATOR_MENU_ITEM</NAME>
#define PLANK_IS_TITLED_SEPARATOR_MENU_ITEM(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), PLANK_TYPE_TITLED_SEPARATOR_MENU_ITEM))
</MACRO>
<MACRO>
<NAME>PLANK_IS_TITLED_SEPARATOR_MENU_ITEM_CLASS</NAME>
#define PLANK_IS_TITLED_SEPARATOR_MENU_ITEM_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), PLANK_TYPE_TITLED_SEPARATOR_MENU_ITEM))
</MACRO>
<MACRO>
<NAME>PLANK_TITLED_SEPARATOR_MENU_ITEM_GET_CLASS</NAME>
#define PLANK_TITLED_SEPARATOR_MENU_ITEM_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), PLANK_TYPE_TITLED_SEPARATOR_MENU_ITEM, PlankTitledSeparatorMenuItemClass))
</MACRO>
<STRUCT>
<NAME>PlankDBusManager</NAME>
struct _PlankDBusManager {
	GObject parent_instance;
	PlankDBusManagerPrivate * priv;
};
</STRUCT>
<STRUCT>
<NAME>PlankDBusManagerClass</NAME>
struct _PlankDBusManagerClass {
	GObjectClass parent_class;
};
</STRUCT>
<STRUCT>
<NAME>PlankDockElement</NAME>
struct _PlankDockElement {
	GObject parent_instance;
	PlankDockElementPrivate * priv;
};
</STRUCT>
<STRUCT>
<NAME>PlankDockElementClass</NAME>
struct _PlankDockElementClass {
	GObjectClass parent_class;
	PlankAnimationType (*on_clicked) (PlankDockElement* self, PlankPopupButton button, GdkModifierType mod, guint32 event_time);
	PlankAnimationType (*on_hovered) (PlankDockElement* self);
	PlankAnimationType (*on_scrolled) (PlankDockElement* self, GdkScrollDirection direction, GdkModifierType mod, guint32 event_time);
	GeeArrayList* (*get_menu_items) (PlankDockElement* self);
	gchar* (*get_drop_text) (PlankDockElement* self);
	gboolean (*can_be_removed) (PlankDockElement* self);
	gboolean (*can_accept_drop) (PlankDockElement* self, GeeArrayList* uris);
	gboolean (*accept_drop) (PlankDockElement* self, GeeArrayList* uris);
	gchar* (*unique_id) (PlankDockElement* self);
	void (*reset_buffers) (PlankDockElement* self);
};
</STRUCT>
<STRUCT>
<NAME>PlankDockContainer</NAME>
struct _PlankDockContainer {
	PlankDockElement parent_instance;
	PlankDockContainerPrivate * priv;
	GeeArrayList* visible_elements;
	GeeArrayList* internal_elements;
};
</STRUCT>
<STRUCT>
<NAME>PlankDockContainerClass</NAME>
struct _PlankDockContainerClass {
	PlankDockElementClass parent_class;
	void (*prepare) (PlankDockContainer* self);
	void (*update_visible_elements) (PlankDockContainer* self);
	gboolean (*move_to) (PlankDockContainer* self, PlankDockElement* move, PlankDockElement* target);
	gboolean (*replace) (PlankDockContainer* self, PlankDockElement* new_element, PlankDockElement* old_element);
	void (*connect_element) (PlankDockContainer* self, PlankDockElement* element);
	void (*disconnect_element) (PlankDockContainer* self, PlankDockElement* element);
};
</STRUCT>
<STRUCT>
<NAME>PlankDockController</NAME>
struct _PlankDockController {
	PlankDockContainer parent_instance;
	PlankDockControllerPrivate * priv;
};
</STRUCT>
<STRUCT>
<NAME>PlankDockControllerClass</NAME>
struct _PlankDockControllerClass {
	PlankDockContainerClass parent_class;
};
</STRUCT>
<STRUCT>
<NAME>PlankSettings</NAME>
struct _PlankSettings {
	GObject parent_instance;
	PlankSettingsPrivate * priv;
};
</STRUCT>
<STRUCT>
<NAME>PlankSettingsClass</NAME>
struct _PlankSettingsClass {
	GObjectClass parent_class;
	void (*verify) (PlankSettings* self, const gchar* name);
};
</STRUCT>
<STRUCT>
<NAME>PlankDockPreferences</NAME>
struct _PlankDockPreferences {
	PlankSettings parent_instance;
	PlankDockPreferencesPrivate * priv;
};
</STRUCT>
<STRUCT>
<NAME>PlankDockPreferencesClass</NAME>
struct _PlankDockPreferencesClass {
	PlankSettingsClass parent_class;
};
</STRUCT>
<STRUCT>
<NAME>PlankRenderer</NAME>
struct _PlankRenderer {
	GObject parent_instance;
	PlankRendererPrivate * priv;
};
</STRUCT>
<STRUCT>
<NAME>PlankRendererClass</NAME>
struct _PlankRendererClass {
	GObjectClass parent_class;
	gboolean (*animation_needed) (PlankRenderer* self, gint64 frame_time);
	void (*initialize_frame) (PlankRenderer* self, gint64 frame_time);
	void (*draw) (PlankRenderer* self, cairo_t* cr, gint64 frame_time);
};
</STRUCT>
<STRUCT>
<NAME>PlankDockRenderer</NAME>
struct _PlankDockRenderer {
	PlankRenderer parent_instance;
	PlankDockRendererPrivate * priv;
};
</STRUCT>
<STRUCT>
<NAME>PlankDockRendererClass</NAME>
struct _PlankDockRendererClass {
	PlankRendererClass parent_class;
};
</STRUCT>
<STRUCT>
<NAME>PlankDragManager</NAME>
struct _PlankDragManager {
	GObject parent_instance;
	PlankDragManagerPrivate * priv;
};
</STRUCT>
<STRUCT>
<NAME>PlankDragManagerClass</NAME>
struct _PlankDragManagerClass {
	GObjectClass parent_class;
};
</STRUCT>
<STRUCT>
<NAME>PlankHideManager</NAME>
struct _PlankHideManager {
	GObject parent_instance;
	PlankHideManagerPrivate * priv;
};
</STRUCT>
<STRUCT>
<NAME>PlankHideManagerClass</NAME>
struct _PlankHideManagerClass {
	GObjectClass parent_class;
};
</STRUCT>
<STRUCT>
<NAME>PlankPositionManager</NAME>
struct _PlankPositionManager {
	GObject parent_instance;
	PlankPositionManagerPrivate * priv;
};
</STRUCT>
<STRUCT>
<NAME>PlankPositionManagerClass</NAME>
struct _PlankPositionManagerClass {
	GObjectClass parent_class;
};
</STRUCT>
<STRUCT>
<NAME>PlankDBusClient</NAME>
struct _PlankDBusClient {
	GObject parent_instance;
	PlankDBusClientPrivate * priv;
};
</STRUCT>
<STRUCT>
<NAME>PlankDBusClientClass</NAME>
struct _PlankDBusClientClass {
	GObjectClass parent_class;
};
</STRUCT>
<STRUCT>
<NAME>PlankDockletIface</NAME>
struct _PlankDockletIface {
	GTypeInterface parent_iface;
	const gchar* (*get_id) (PlankDocklet* self);
	const gchar* (*get_name) (PlankDocklet* self);
	const gchar* (*get_description) (PlankDocklet* self);
	const gchar* (*get_icon) (PlankDocklet* self);
	gboolean (*is_supported) (PlankDocklet* self);
	PlankDockElement* (*make_element) (PlankDocklet* self, const gchar* launcher, GFile* file);
};
</STRUCT>
<STRUCT>
<NAME>PlankDockItem</NAME>
struct _PlankDockItem {
	PlankDockElement parent_instance;
	PlankDockItemPrivate * priv;
};
</STRUCT>
<STRUCT>
<NAME>PlankDockItemClass</NAME>
struct _PlankDockItemClass {
	PlankDockElementClass parent_class;
	void (*load_from_launcher) (PlankDockItem* self);
	void (*draw_icon) (PlankDockItem* self, PlankSurface* surface);
	void (*draw_icon_fast) (PlankDockItem* self, PlankSurface* surface);
	gboolean (*is_valid) (PlankDockItem* self);
};
</STRUCT>
<STRUCT>
<NAME>PlankDockletItem</NAME>
struct _PlankDockletItem {
	PlankDockItem parent_instance;
	PlankDockletItemPrivate * priv;
};
</STRUCT>
<STRUCT>
<NAME>PlankDockletItemClass</NAME>
struct _PlankDockletItemClass {
	PlankDockItemClass parent_class;
};
</STRUCT>
<STRUCT>
<NAME>PlankDockletManager</NAME>
struct _PlankDockletManager {
	GObject parent_instance;
	PlankDockletManagerPrivate * priv;
};
</STRUCT>
<STRUCT>
<NAME>PlankDockletManagerClass</NAME>
struct _PlankDockletManagerClass {
	GObjectClass parent_class;
};
</STRUCT>
<STRUCT>
<NAME>PlankDrawingService</NAME>
struct _PlankDrawingService {
	GObject parent_instance;
	PlankDrawingServicePrivate * priv;
};
</STRUCT>
<STRUCT>
<NAME>PlankDrawingServiceClass</NAME>
struct _PlankDrawingServiceClass {
	GObjectClass parent_class;
};
</STRUCT>
<STRUCT>
<NAME>PlankPreferences</NAME>
struct _PlankPreferences {
	GObject parent_instance;
	PlankPreferencesPrivate * priv;
};
</STRUCT>
<STRUCT>
<NAME>PlankPreferencesClass</NAME>
struct _PlankPreferencesClass {
	GObjectClass parent_class;
	void (*verify) (PlankPreferences* self, const gchar* prop);
	void (*reset_properties) (PlankPreferences* self);
};
</STRUCT>
<STRUCT>
<NAME>PlankTheme</NAME>
struct _PlankTheme {
	PlankPreferences parent_instance;
	PlankThemePrivate * priv;
};
</STRUCT>
<STRUCT>
<NAME>PlankThemeClass</NAME>
struct _PlankThemeClass {
	PlankPreferencesClass parent_class;
};
</STRUCT>
<STRUCT>
<NAME>PlankDockTheme</NAME>
struct _PlankDockTheme {
	PlankTheme parent_instance;
	PlankDockThemePrivate * priv;
};
</STRUCT>
<STRUCT>
<NAME>PlankDockThemeClass</NAME>
struct _PlankDockThemeClass {
	PlankThemeClass parent_class;
};
</STRUCT>
<STRUCT>
<NAME>PlankSurface</NAME>
struct _PlankSurface {
	GObject parent_instance;
	PlankSurfacePrivate * priv;
};
</STRUCT>
<STRUCT>
<NAME>PlankSurfaceClass</NAME>
struct _PlankSurfaceClass {
	GObjectClass parent_class;
};
</STRUCT>
<STRUCT>
<NAME>PlankSurfaceCache</NAME>
struct _PlankSurfaceCache {
	GObject parent_instance;
	PlankSurfaceCachePrivate * priv;
};
</STRUCT>
<STRUCT>
<NAME>PlankSurfaceCacheClass</NAME>
struct _PlankSurfaceCacheClass {
	GObjectClass parent_class;
};
</STRUCT>
<STRUCT>
<NAME>PlankAbstractMain</NAME>
struct _PlankAbstractMain {
	GtkApplication parent_instance;
	PlankAbstractMainPrivate * priv;
};
</STRUCT>
<STRUCT>
<NAME>PlankAbstractMainClass</NAME>
struct _PlankAbstractMainClass {
	GtkApplicationClass parent_class;
	void (*initialize) (PlankAbstractMain* self);
	void (*create_docks) (PlankAbstractMain* self);
	void (*create_actions) (PlankAbstractMain* self);
};
</STRUCT>
<STRUCT>
<NAME>PlankFactory</NAME>
struct _PlankFactory {
	GObject parent_instance;
	PlankFactoryPrivate * priv;
};
</STRUCT>
<STRUCT>
<NAME>PlankFactoryClass</NAME>
struct _PlankFactoryClass {
	GObjectClass parent_class;
};
</STRUCT>
<STRUCT>
<NAME>PlankItemFactory</NAME>
struct _PlankItemFactory {
	GObject parent_instance;
	PlankItemFactoryPrivate * priv;
	GFile* launchers_dir;
};
</STRUCT>
<STRUCT>
<NAME>PlankItemFactoryClass</NAME>
struct _PlankItemFactoryClass {
	GObjectClass parent_class;
	PlankDockElement* (*make_element) (PlankItemFactory* self, GFile* file);
	PlankDockItem* (*get_item_for_dock) (PlankItemFactory* self);
};
</STRUCT>
<STRUCT>
<NAME>PlankApplicationDockItem</NAME>
struct _PlankApplicationDockItem {
	PlankDockItem parent_instance;
	PlankApplicationDockItemPrivate * priv;
};
</STRUCT>
<STRUCT>
<NAME>PlankApplicationDockItemClass</NAME>
struct _PlankApplicationDockItemClass {
	PlankDockItemClass parent_class;
};
</STRUCT>
<STRUCT>
<NAME>PlankDockItemProvider</NAME>
struct _PlankDockItemProvider {
	PlankDockContainer parent_instance;
	PlankDockItemProviderPrivate * priv;
};
</STRUCT>
<STRUCT>
<NAME>PlankDockItemProviderClass</NAME>
struct _PlankDockItemProviderClass {
	PlankDockContainerClass parent_class;
	gboolean (*item_exists_for_uri) (PlankDockItemProvider* self, const gchar* uri);
	PlankDockItem* (*item_for_uri) (PlankDockItemProvider* self, const gchar* uri);
	gboolean (*add_item_with_uri) (PlankDockItemProvider* self, const gchar* uri, PlankDockItem* target);
	void (*handle_item_deleted) (PlankDockItemProvider* self, PlankDockItem* item);
	gchar** (*get_dockitem_filenames) (PlankDockItemProvider* self, gint* result_length1);
};
</STRUCT>
<STRUCT>
<NAME>PlankUnityClientIface</NAME>
struct _PlankUnityClientIface {
	GTypeInterface parent_iface;
	void (*update_launcher_entry) (PlankUnityClient* self, const gchar* sender_name, GVariant* parameters, gboolean is_retry);
	void (*remove_launcher_entry) (PlankUnityClient* self, const gchar* sender_name);
};
</STRUCT>
<STRUCT>
<NAME>PlankApplicationDockItemProvider</NAME>
struct _PlankApplicationDockItemProvider {
	PlankDockItemProvider parent_instance;
	PlankApplicationDockItemProviderPrivate * priv;
};
</STRUCT>
<STRUCT>
<NAME>PlankApplicationDockItemProviderClass</NAME>
struct _PlankApplicationDockItemProviderClass {
	PlankDockItemProviderClass parent_class;
	void (*app_opened) (PlankApplicationDockItemProvider* self, BamfApplication* app);
};
</STRUCT>
<STRUCT>
<NAME>PlankDefaultApplicationDockItemProvider</NAME>
struct _PlankDefaultApplicationDockItemProvider {
	PlankApplicationDockItemProvider parent_instance;
	PlankDefaultApplicationDockItemProviderPrivate * priv;
};
</STRUCT>
<STRUCT>
<NAME>PlankDefaultApplicationDockItemProviderClass</NAME>
struct _PlankDefaultApplicationDockItemProviderClass {
	PlankApplicationDockItemProviderClass parent_class;
};
</STRUCT>
<STRUCT>
<NAME>PlankPointD</NAME>
struct _PlankPointD {
	gdouble x;
	gdouble y;
};
</STRUCT>
<STRUCT>
<NAME>PlankDockItemDrawValue</NAME>
struct _PlankDockItemDrawValue {
	GTypeInstance parent_instance;
	volatile int ref_count;
	PlankDockItemDrawValuePrivate * priv;
	PlankPointD center;
	PlankPointD static_center;
	gdouble icon_size;
	GdkRectangle hover_region;
	GdkRectangle draw_region;
	GdkRectangle background_region;
	gdouble zoom;
	gdouble opacity;
	gdouble darken;
	gdouble lighten;
	gboolean show_indicator;
};
</STRUCT>
<STRUCT>
<NAME>PlankDockItemDrawValueClass</NAME>
struct _PlankDockItemDrawValueClass {
	GTypeClass parent_class;
	void (*finalize) (PlankDockItemDrawValue *self);
};
</STRUCT>
<STRUCT>
<NAME>PlankDockItemPreferences</NAME>
struct _PlankDockItemPreferences {
	PlankPreferences parent_instance;
	PlankDockItemPreferencesPrivate * priv;
};
</STRUCT>
<STRUCT>
<NAME>PlankDockItemPreferencesClass</NAME>
struct _PlankDockItemPreferencesClass {
	PlankPreferencesClass parent_class;
};
</STRUCT>
<STRUCT>
<NAME>PlankFileDockItem</NAME>
struct _PlankFileDockItem {
	PlankDockItem parent_instance;
	PlankFileDockItemPrivate * priv;
};
</STRUCT>
<STRUCT>
<NAME>PlankFileDockItemClass</NAME>
struct _PlankFileDockItemClass {
	PlankDockItemClass parent_class;
};
</STRUCT>
<STRUCT>
<NAME>PlankFileDockItemFileSortData</NAME>
struct _PlankFileDockItemFileSortData {
	GTypeInstance parent_instance;
	volatile int ref_count;
	PlankFileDockItemFileSortDataPrivate * priv;
};
</STRUCT>
<STRUCT>
<NAME>PlankFileDockItemFileSortDataClass</NAME>
struct _PlankFileDockItemFileSortDataClass {
	GTypeClass parent_class;
	void (*finalize) (PlankFileDockItemFileSortData *self);
};
</STRUCT>
<STRUCT>
<NAME>PlankPlaceholderDockItem</NAME>
struct _PlankPlaceholderDockItem {
	PlankDockItem parent_instance;
	PlankPlaceholderDockItemPrivate * priv;
};
</STRUCT>
<STRUCT>
<NAME>PlankPlaceholderDockItemClass</NAME>
struct _PlankPlaceholderDockItemClass {
	PlankDockItemClass parent_class;
};
</STRUCT>
<STRUCT>
<NAME>PlankPlankDockItem</NAME>
struct _PlankPlankDockItem {
	PlankDockItem parent_instance;
	PlankPlankDockItemPrivate * priv;
};
</STRUCT>
<STRUCT>
<NAME>PlankPlankDockItemClass</NAME>
struct _PlankPlankDockItemClass {
	PlankDockItemClass parent_class;
};
</STRUCT>
<STRUCT>
<NAME>PlankTransientDockItem</NAME>
struct _PlankTransientDockItem {
	PlankApplicationDockItem parent_instance;
	PlankTransientDockItemPrivate * priv;
};
</STRUCT>
<STRUCT>
<NAME>PlankTransientDockItemClass</NAME>
struct _PlankTransientDockItemClass {
	PlankApplicationDockItemClass parent_class;
};
</STRUCT>
<STRUCT>
<NAME>PlankLogger</NAME>
struct _PlankLogger {
	GObject parent_instance;
	PlankLoggerPrivate * priv;
};
</STRUCT>
<STRUCT>
<NAME>PlankLoggerClass</NAME>
struct _PlankLoggerClass {
	GObjectClass parent_class;
};
</STRUCT>
<STRUCT>
<NAME>PlankPaths</NAME>
struct _PlankPaths {
	GObject parent_instance;
	PlankPathsPrivate * priv;
};
</STRUCT>
<STRUCT>
<NAME>PlankPathsClass</NAME>
struct _PlankPathsClass {
	GObjectClass parent_class;
};
</STRUCT>
<STRUCT>
<NAME>PlankSerializableIface</NAME>
struct _PlankSerializableIface {
	GTypeInterface parent_iface;
	gchar* (*serialize) (PlankSerializable* self);
	void (*deserialize) (PlankSerializable* self, const gchar* s);
};
</STRUCT>
<STRUCT>
<NAME>PlankSystem</NAME>
struct _PlankSystem {
	GObject parent_instance;
	PlankSystemPrivate * priv;
};
</STRUCT>
<STRUCT>
<NAME>PlankSystemClass</NAME>
struct _PlankSystemClass {
	GObjectClass parent_class;
};
</STRUCT>
<STRUCT>
<NAME>PlankUnity</NAME>
struct _PlankUnity {
	GObject parent_instance;
	PlankUnityPrivate * priv;
};
</STRUCT>
<STRUCT>
<NAME>PlankUnityClass</NAME>
struct _PlankUnityClass {
	GObjectClass parent_class;
};
</STRUCT>
<STRUCT>
<NAME>PlankWorker</NAME>
struct _PlankWorker {
	GObject parent_instance;
	PlankWorkerPrivate * priv;
};
</STRUCT>
<STRUCT>
<NAME>PlankWorkerClass</NAME>
struct _PlankWorkerClass {
	GObjectClass parent_class;
};
</STRUCT>
<STRUCT>
<NAME>PlankCompositedWindow</NAME>
struct _PlankCompositedWindow {
	GtkWindow parent_instance;
	PlankCompositedWindowPrivate * priv;
};
</STRUCT>
<STRUCT>
<NAME>PlankCompositedWindowClass</NAME>
struct _PlankCompositedWindowClass {
	GtkWindowClass parent_class;
};
</STRUCT>
<STRUCT>
<NAME>PlankDockWindow</NAME>
struct _PlankDockWindow {
	PlankCompositedWindow parent_instance;
	PlankDockWindowPrivate * priv;
};
</STRUCT>
<STRUCT>
<NAME>PlankDockWindowClass</NAME>
struct _PlankDockWindowClass {
	PlankCompositedWindowClass parent_class;
};
</STRUCT>
<STRUCT>
<NAME>PlankHoverWindow</NAME>
struct _PlankHoverWindow {
	GtkWindow parent_instance;
	PlankHoverWindowPrivate * priv;
};
</STRUCT>
<STRUCT>
<NAME>PlankHoverWindowClass</NAME>
struct _PlankHoverWindowClass {
	GtkWindowClass parent_class;
};
</STRUCT>
<STRUCT>
<NAME>PlankPoofWindow</NAME>
struct _PlankPoofWindow {
	PlankCompositedWindow parent_instance;
	PlankPoofWindowPrivate * priv;
};
</STRUCT>
<STRUCT>
<NAME>PlankPoofWindowClass</NAME>
struct _PlankPoofWindowClass {
	PlankCompositedWindowClass parent_class;
};
</STRUCT>
<STRUCT>
<NAME>PlankPreferencesWindow</NAME>
struct _PlankPreferencesWindow {
	GtkWindow parent_instance;
	PlankPreferencesWindowPrivate * priv;
};
</STRUCT>
<STRUCT>
<NAME>PlankPreferencesWindowClass</NAME>
struct _PlankPreferencesWindowClass {
	GtkWindowClass parent_class;
};
</STRUCT>
<STRUCT>
<NAME>PlankTitledSeparatorMenuItem</NAME>
struct _PlankTitledSeparatorMenuItem {
	GtkSeparatorMenuItem parent_instance;
	PlankTitledSeparatorMenuItemPrivate * priv;
};
</STRUCT>
<STRUCT>
<NAME>PlankTitledSeparatorMenuItemClass</NAME>
struct _PlankTitledSeparatorMenuItemClass {
	GtkSeparatorMenuItemClass parent_class;
};
</STRUCT>
<STRUCT>
<NAME>PlankAbstractMainPrivate</NAME>
</STRUCT>
<STRUCT>
<NAME>PlankApplicationDockItemPrivate</NAME>
</STRUCT>
<STRUCT>
<NAME>PlankApplicationDockItemProviderPrivate</NAME>
</STRUCT>
<STRUCT>
<NAME>PlankCompositedWindowPrivate</NAME>
</STRUCT>
<STRUCT>
<NAME>PlankDBusClientPrivate</NAME>
</STRUCT>
<STRUCT>
<NAME>PlankDBusManagerPrivate</NAME>
</STRUCT>
<STRUCT>
<NAME>PlankDefaultApplicationDockItemProviderPrivate</NAME>
</STRUCT>
<STRUCT>
<NAME>PlankDockContainerPrivate</NAME>
</STRUCT>
<STRUCT>
<NAME>PlankDockControllerPrivate</NAME>
</STRUCT>
<STRUCT>
<NAME>PlankDockElementPrivate</NAME>
</STRUCT>
<STRUCT>
<NAME>PlankDockItemDrawValuePrivate</NAME>
</STRUCT>
<STRUCT>
<NAME>PlankDockItemPreferencesPrivate</NAME>
</STRUCT>
<STRUCT>
<NAME>PlankDockItemPrivate</NAME>
</STRUCT>
<STRUCT>
<NAME>PlankDockItemProviderPrivate</NAME>
</STRUCT>
<STRUCT>
<NAME>PlankDockPreferencesPrivate</NAME>
</STRUCT>
<STRUCT>
<NAME>PlankDockRendererPrivate</NAME>
</STRUCT>
<STRUCT>
<NAME>PlankDockThemePrivate</NAME>
</STRUCT>
<STRUCT>
<NAME>PlankDockWindowPrivate</NAME>
</STRUCT>
<STRUCT>
<NAME>PlankDocklet</NAME>
</STRUCT>
<STRUCT>
<NAME>PlankDockletItemPrivate</NAME>
</STRUCT>
<STRUCT>
<NAME>PlankDockletManagerPrivate</NAME>
</STRUCT>
<STRUCT>
<NAME>PlankDragManagerPrivate</NAME>
</STRUCT>
<STRUCT>
<NAME>PlankDrawingServicePrivate</NAME>
</STRUCT>
<STRUCT>
<NAME>PlankFactoryPrivate</NAME>
</STRUCT>
<STRUCT>
<NAME>PlankFileDockItemFileSortDataPrivate</NAME>
</STRUCT>
<STRUCT>
<NAME>PlankFileDockItemPrivate</NAME>
</STRUCT>
<STRUCT>
<NAME>PlankHideManagerPrivate</NAME>
</STRUCT>
<STRUCT>
<NAME>PlankHoverWindowPrivate</NAME>
</STRUCT>
<STRUCT>
<NAME>PlankItemFactoryPrivate</NAME>
</STRUCT>
<STRUCT>
<NAME>PlankLoggerPrivate</NAME>
</STRUCT>
<STRUCT>
<NAME>PlankPathsPrivate</NAME>
</STRUCT>
<STRUCT>
<NAME>PlankPlaceholderDockItemPrivate</NAME>
</STRUCT>
<STRUCT>
<NAME>PlankPlankDockItemPrivate</NAME>
</STRUCT>
<STRUCT>
<NAME>PlankPoofWindowPrivate</NAME>
</STRUCT>
<STRUCT>
<NAME>PlankPositionManagerPrivate</NAME>
</STRUCT>
<STRUCT>
<NAME>PlankPreferencesPrivate</NAME>
</STRUCT>
<STRUCT>
<NAME>PlankPreferencesWindowPrivate</NAME>
</STRUCT>
<STRUCT>
<NAME>PlankRendererPrivate</NAME>
</STRUCT>
<STRUCT>
<NAME>PlankSerializable</NAME>
</STRUCT>
<STRUCT>
<NAME>PlankSettingsPrivate</NAME>
</STRUCT>
<STRUCT>
<NAME>PlankSurfaceCachePrivate</NAME>
</STRUCT>
<STRUCT>
<NAME>PlankSurfacePrivate</NAME>
</STRUCT>
<STRUCT>
<NAME>PlankSystemPrivate</NAME>
</STRUCT>
<STRUCT>
<NAME>PlankThemePrivate</NAME>
</STRUCT>
<STRUCT>
<NAME>PlankTitledSeparatorMenuItemPrivate</NAME>
</STRUCT>
<STRUCT>
<NAME>PlankTransientDockItemPrivate</NAME>
</STRUCT>
<STRUCT>
<NAME>PlankUnityClient</NAME>
</STRUCT>
<STRUCT>
<NAME>PlankUnityPrivate</NAME>
</STRUCT>
<STRUCT>
<NAME>PlankWorkerPrivate</NAME>
</STRUCT>
