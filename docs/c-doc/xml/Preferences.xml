<?xml version="1.0"?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.3//EN"
               "http://www.oasis-open.org/docbook/xml/4.3/docbookx.dtd"
[
  <!ENTITY % local.common.attrib "xmlns:xi  CDATA  #FIXED 'http://www.w3.org/2003/XInclude'">
  <!ENTITY % gtkdocentities SYSTEM "../xml/gtkdocentities.ent">
  %gtkdocentities;
]>
<refentry id="plank-reloaded-PlankPreferences">
<refmeta>
<refentrytitle role="top_of_page" id="plank-reloaded-PlankPreferences.top_of_page">PlankPreferences</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>PLANK-RELOADED Library</refmiscinfo>
</refmeta>
<refnamediv>
<refname>PlankPreferences</refname>
<refpurpose>The base class for all preferences in the system. Preferences are serialized to files. The file is watched for changes and loads new values if the backing file changed. When any public property of a sub-class is changed, the public properties are serialized to the backing file.</refpurpose>
</refnamediv>

<refsect1 id="plank-reloaded-PlankPreferences.other" role="other_proto">
<title role="other_proto.title">Types and Values</title>
<informaltable pgwide="1" frame="none">
<tgroup cols="2">
<colspec colname="other_proto_type" colwidth="150px"/>
<colspec colname="other_proto_name"/>
<tbody>
<row><entry role="define_keyword">#define</entry><entry role="function_name"><link linkend="PLANK-TYPE-PREFERENCES:CAPS">PLANK_TYPE_PREFERENCES</link></entry></row>
<row><entry role="datatype_keyword">struct</entry><entry role="function_name"><link linkend="PlankPreferences">PlankPreferences</link></entry></row>
<row><entry role="datatype_keyword">struct</entry><entry role="function_name"><link linkend="PlankPreferencesClass">PlankPreferencesClass</link></entry></row>
<row><entry role="datatype_keyword"></entry><entry role="function_name"><link linkend="PlankSerializable">PlankSerializable</link></entry></row>
<row><entry role="datatype_keyword">struct</entry><entry role="function_name"><link linkend="PlankSerializableIface">PlankSerializableIface</link></entry></row>

</tbody>
</tgroup>
</informaltable>
</refsect1>


<refsect1 id="plank-reloaded-PlankPreferences.description" role="desc">
<title role="desc.title">Description</title>

</refsect1>
<refsect1 id="plank-reloaded-PlankPreferences.functions_details" role="details">
<title role="details.title">Functions</title>
<para />
</refsect1>
<refsect1 id="plank-reloaded-PlankPreferences.other_details" role="details">
<title role="details.title">Types and Values</title>
<refsect2 id="PLANK-TYPE-PREFERENCES:CAPS" role="macro">
<title>PLANK_TYPE_PREFERENCES</title>
<indexterm zone="PLANK-TYPE-PREFERENCES:CAPS"><primary>PLANK_TYPE_PREFERENCES</primary></indexterm>
<programlisting language="C">#define PLANK_TYPE_PREFERENCES (plank_preferences_get_type ())
</programlisting>
<para>The type for <link linkend="PlankPreferences"><type>PlankPreferences</type></link>.</para>
</refsect2>
<refsect2 id="PlankPreferences" role="struct">
<title>struct PlankPreferences</title>
<indexterm zone="PlankPreferences"><primary>PlankPreferences</primary></indexterm>
<programlisting language="C">struct PlankPreferences {
	GObject parent_instance;
	PlankPreferencesPrivate * priv;
};
</programlisting>
<para>The base class for all preferences in the system. Preferences are serialized to files. The file is watched for changes and loads new values if the backing file changed. When any public property of a sub-class is changed, the public properties are serialized to the backing file.</para>
</refsect2>
<refsect2 id="PlankPreferencesClass" role="struct">
<title>struct PlankPreferencesClass</title>
<indexterm zone="PlankPreferencesClass"><primary>PlankPreferencesClass</primary></indexterm>
<programlisting language="C">struct PlankPreferencesClass {
	GObjectClass parent_class;
	void (*verify) (PlankPreferences* self, const gchar* prop);
	void (*reset_properties) (PlankPreferences* self);
};
</programlisting>
<para>The class structure for <link linkend="PLANK-TYPE-PREFERENCES:CAPS"><literal>PLANK_TYPE_PREFERENCES</literal></link>. All the fields in this structure are private and should never be accessed directly.</para>
<refsect3 id="PlankPreferencesClass.members" role="struct_members">
<title>Members</title>
<informaltable role="struct_members_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="struct_members_name" colwidth="300px"/>
<colspec colname="struct_members_description"/>
<colspec colname="struct_members_annotations" colwidth="200px"/>
<tbody>
<row role="member"><entry role="struct_member_name"><para><structfield id="PlankPreferencesClass.verify">verify</structfield>&#160;()</para></entry>
<entry role="struct_member_description"><para>virtual method used internally</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row role="member"><entry role="struct_member_name"><para><structfield id="PlankPreferencesClass.reset-properties">reset_properties</structfield>&#160;()</para></entry>
<entry role="struct_member_description"><para>virtual method used internally</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
</tbody></tgroup></informaltable>
</refsect3>
</refsect2>
<refsect2 id="PlankSerializable" role="struct">
<title>PlankSerializable</title>
<indexterm zone="PlankSerializable"><primary>PlankSerializable</primary></indexterm>
<programlisting language="C">typedef struct _PlankSerializable PlankSerializable;</programlisting>
<para>This interface is used by objects that need to be serialized in a Preferences. The object must have a string representation and provide these methods to translate between the string and object representations.</para>
</refsect2>
<refsect2 id="PlankSerializableIface" role="struct">
<title>struct PlankSerializableIface</title>
<indexterm zone="PlankSerializableIface"><primary>PlankSerializableIface</primary></indexterm>
<programlisting language="C">struct PlankSerializableIface {
	GTypeInterface parent_iface;
	gchar* (*serialize) (PlankSerializable* self);
	void (*deserialize) (PlankSerializable* self, const gchar* s);
};
</programlisting>
<para>Interface for creating <link linkend="PlankSerializable"><type>PlankSerializable</type></link> implementations.</para>
<refsect3 id="PlankSerializableIface.members" role="struct_members">
<title>Members</title>
<informaltable role="struct_members_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="struct_members_name" colwidth="300px"/>
<colspec colname="struct_members_description"/>
<colspec colname="struct_members_annotations" colwidth="200px"/>
<tbody>
<row role="member"><entry role="struct_member_name"><para><link linkend="GTypeInterface"><type>GTypeInterface</type></link>&#160;<structfield id="PlankSerializableIface.parent-iface">parent_iface</structfield>;</para></entry>
<entry role="struct_member_description"><para>the parent interface structure</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row role="member"><entry role="struct_member_name"><para><structfield id="PlankSerializableIface.serialize">serialize</structfield>&#160;()</para></entry>
<entry role="struct_member_description"><para>virtual method called by <link linkend="plank-serializable-serialize"><function><link linkend="plank-serializable-serialize"><function>plank_serializable_serialize()</function></link></function></link></para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row role="member"><entry role="struct_member_name"><para><structfield id="PlankSerializableIface.deserialize">deserialize</structfield>&#160;()</para></entry>
<entry role="struct_member_description"><para>virtual method called by <link linkend="plank-serializable-deserialize"><function><link linkend="plank-serializable-deserialize"><function>plank_serializable_deserialize()</function></link></function></link></para></entry>
<entry role="struct_member_annotations"></entry>
</row>
</tbody></tgroup></informaltable>
</refsect3>
</refsect2>

</refsect1>

</refentry>
