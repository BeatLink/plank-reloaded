<?xml version="1.0"?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.3//EN"
               "http://www.oasis-open.org/docbook/xml/4.3/docbookx.dtd"
[
  <!ENTITY % local.common.attrib "xmlns:xi  CDATA  #FIXED 'http://www.w3.org/2003/XInclude'">
  <!ENTITY % gtkdocentities SYSTEM "../xml/gtkdocentities.ent">
  %gtkdocentities;
]>
<refentry id="plank-reloaded-PlankUnity">
<refmeta>
<refentrytitle role="top_of_page" id="plank-reloaded-PlankUnity.top_of_page">PlankUnity</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>PLANK-RELOADED Library</refmiscinfo>
</refmeta>
<refnamediv>
<refname>PlankUnity</refname>
<refpurpose>Handle the LauncherEntry DBus interface implemented by applications.</refpurpose>
</refnamediv>

<refsect1 id="plank-reloaded-PlankUnity.other" role="other_proto">
<title role="other_proto.title">Types and Values</title>
<informaltable pgwide="1" frame="none">
<tgroup cols="2">
<colspec colname="other_proto_type" colwidth="150px"/>
<colspec colname="other_proto_name"/>
<tbody>
<row><entry role="define_keyword">#define</entry><entry role="function_name"><link linkend="PLANK-TYPE-UNITY:CAPS">PLANK_TYPE_UNITY</link></entry></row>
<row><entry role="datatype_keyword">struct</entry><entry role="function_name"><link linkend="PlankUnity">PlankUnity</link></entry></row>
<row><entry role="datatype_keyword">struct</entry><entry role="function_name"><link linkend="PlankUnityClass">PlankUnityClass</link></entry></row>
<row><entry role="datatype_keyword"></entry><entry role="function_name"><link linkend="PlankUnityClient">PlankUnityClient</link></entry></row>
<row><entry role="datatype_keyword">struct</entry><entry role="function_name"><link linkend="PlankUnityClientIface">PlankUnityClientIface</link></entry></row>

</tbody>
</tgroup>
</informaltable>
</refsect1>


<refsect1 id="plank-reloaded-PlankUnity.description" role="desc">
<title role="desc.title">Description</title>

</refsect1>
<refsect1 id="plank-reloaded-PlankUnity.functions_details" role="details">
<title role="details.title">Functions</title>
<para />
</refsect1>
<refsect1 id="plank-reloaded-PlankUnity.other_details" role="details">
<title role="details.title">Types and Values</title>
<refsect2 id="PLANK-TYPE-UNITY:CAPS" role="macro">
<title>PLANK_TYPE_UNITY</title>
<indexterm zone="PLANK-TYPE-UNITY:CAPS"><primary>PLANK_TYPE_UNITY</primary></indexterm>
<programlisting language="C">#define PLANK_TYPE_UNITY (plank_unity_get_type ())
</programlisting>
<para>The type for <link linkend="PlankUnity"><type>PlankUnity</type></link>.</para>
</refsect2>
<refsect2 id="PlankUnity" role="struct">
<title>struct PlankUnity</title>
<indexterm zone="PlankUnity"><primary>PlankUnity</primary></indexterm>
<programlisting language="C">struct PlankUnity {
	GObject parent_instance;
	PlankUnityPrivate * priv;
};
</programlisting>
<para>Handle the LauncherEntry DBus interface implemented by applications.</para>
</refsect2>
<refsect2 id="PlankUnityClass" role="struct">
<title>struct PlankUnityClass</title>
<indexterm zone="PlankUnityClass"><primary>PlankUnityClass</primary></indexterm>
<programlisting language="C">struct PlankUnityClass {
	GObjectClass parent_class;
};
</programlisting>
<para>The class structure for <link linkend="PLANK-TYPE-UNITY:CAPS"><literal>PLANK_TYPE_UNITY</literal></link>. All the fields in this structure are private and should never be accessed directly.</para>
<refsect3 id="PlankUnityClass.members" role="struct_members">
<title>Members</title>
<informaltable role="struct_members_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="struct_members_name" colwidth="300px"/>
<colspec colname="struct_members_description"/>
<colspec colname="struct_members_annotations" colwidth="200px"/>
<tbody>
</tbody></tgroup></informaltable>
</refsect3>
</refsect2>
<refsect2 id="PlankUnityClient" role="struct">
<title>PlankUnityClient</title>
<indexterm zone="PlankUnityClient"><primary>PlankUnityClient</primary></indexterm>
<programlisting language="C">typedef struct _PlankUnityClient PlankUnityClient;</programlisting>
<para>The interface to provide the LauncherEntry handling.</para>
</refsect2>
<refsect2 id="PlankUnityClientIface" role="struct">
<title>struct PlankUnityClientIface</title>
<indexterm zone="PlankUnityClientIface"><primary>PlankUnityClientIface</primary></indexterm>
<programlisting language="C">struct PlankUnityClientIface {
	GTypeInterface parent_iface;
	void (*update_launcher_entry) (PlankUnityClient* self, const gchar* sender_name, GVariant* parameters, gboolean is_retry);
	void (*remove_launcher_entry) (PlankUnityClient* self, const gchar* sender_name);
};
</programlisting>
<para>Interface for creating <link linkend="PlankUnityClient"><type>PlankUnityClient</type></link> implementations.</para>
<refsect3 id="PlankUnityClientIface.members" role="struct_members">
<title>Members</title>
<informaltable role="struct_members_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="struct_members_name" colwidth="300px"/>
<colspec colname="struct_members_description"/>
<colspec colname="struct_members_annotations" colwidth="200px"/>
<tbody>
<row role="member"><entry role="struct_member_name"><para><link linkend="GTypeInterface"><type>GTypeInterface</type></link>&#160;<structfield id="PlankUnityClientIface.parent-iface">parent_iface</structfield>;</para></entry>
<entry role="struct_member_description"><para>the parent interface structure</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row role="member"><entry role="struct_member_name"><para><structfield id="PlankUnityClientIface.update-launcher-entry">update_launcher_entry</structfield>&#160;()</para></entry>
<entry role="struct_member_description"><para>virtual method called by <link linkend="plank-unity-client-update-launcher-entry"><function><link linkend="plank-unity-client-update-launcher-entry"><function>plank_unity_client_update_launcher_entry()</function></link></function></link></para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row role="member"><entry role="struct_member_name"><para><structfield id="PlankUnityClientIface.remove-launcher-entry">remove_launcher_entry</structfield>&#160;()</para></entry>
<entry role="struct_member_description"><para>virtual method called by <link linkend="plank-unity-client-remove-launcher-entry"><function><link linkend="plank-unity-client-remove-launcher-entry"><function>plank_unity_client_remove_launcher_entry()</function></link></function></link></para></entry>
<entry role="struct_member_annotations"></entry>
</row>
</tbody></tgroup></informaltable>
</refsect3>
</refsect2>

</refsect1>

</refentry>
